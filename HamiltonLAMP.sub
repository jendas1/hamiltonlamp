// {{{ 2 "SubmethodForwardDeclaration" ""
private function BatchAliquot( variable NrStacks ) void ;
private function HeatAndQC(  ) void ;
private function MasterMixPreparation( variable plates ) void ;
private function OnStart(  ) void ;
private function QCAliquotMini(  ) void ;
private function QCAliquotWIP(  ) void ;
function OnAbort(  ) void ;
// }} ""
// {{{ 5 "OnAbort" "Begin"
function OnAbort(  ) void {
// }} ""
// {{ 5 "OnAbort" "InitLocals"
// }} ""
// {{{ 151 1 0 "ff7b83fa_daf9_4167_a85fa607ce073680" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
HSLHamHeaterShaker::StopTempCtrl(heaterID);
// }} ""
// {{{ 152 1 0 "fba52c38_6014_437f_ab166feb6af7315a" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
HSLHamHeaterShaker::Terminate();
// }} ""
// {{{ 153 1 0 "26d26b5f_0bd0_464a_88cee3458b45f415" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
EASYPICK::INIT::DeInit();
// }} ""
// {{{ 5 "OnAbort" "End"
}
// }} ""
// {{{ 5 "HeatAndQC" "Begin"
private function HeatAndQC(  ) void {
// }} ""
private timer Incubation;
// {{ 5 "HeatAndQC" "InitLocals"
// }} ""
// {{ 79 1 0 "3e0c55c8_df01_4c77_9231ee1a1822a029" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{ 80 1 0 "69c862ca_56f9_44be_9cbfe3ca24794d4c" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{ 81 1 0 "e185acb1_2916_42bd_aafb31aff5389a3c" "{B31F3543-5D80-11d4-A5EB-0050DA737D89}"
heaterID = 1;
// }} ""
/* {{ 1 "" "0" */ if(0){  /* }} "" */
// {{{ 82 1 0 "aecf244e_5a99_4cb0_8afab366d1d1dc09" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
HSLHamHeaterShaker::CreateStarDevice(ML_STAR, 2, heaterID);
// }} ""
// {{{ 83 1 0 "af242686_4cbb_439a_bfd6c77eeeb73dcf" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
EASYPICK::INIT::Init(ML_STAR, 1, 1);
// }} ""
// {{{ 84 1 0 "5c86cc3e_b83f_4215_8051afbfa856b4e2" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
EASYPICK_HELPER::EasyStep_Init(ML_STAR, EASYPICK::_HSLTRUE);
// }} ""
/* {{ 1 "" "1" */ } /* }} "" */
// {{{ 85 1 0 "7056485b_5264_4d4c_b1d93000d00b5bc4" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
HSLHamHeaterShaker::StartTempCtrl(heaterID, 68, 1);
// }} ""
// {{{ 86 1 0 "bd35c2b5_ff88_411f_b4a5408151dc6e9e" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
EASYPICK_HELPER::Camera_Place_to_BacterialPlate(ML_STAR, Translate("Nun_96_Fl_Hb_0001"));
// }} ""
// {{{ 87 1 0 "1ff6d2c8_6be3_4121_aca4cdb22efc8205" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
EASYPICK::APPLICATION::PictureFile_Take(Translate("D:\beforeHeat.png"), 100, EASYPICK::PICTUREFILE::SAVEFORMAT::_PNG, EASYPICK::PICTUREFILE::COLORMODE::_COLOR);
// }} ""
// {{ 88 1 0 "3885780b_dd30_405c_80020d4443a79325" "ML_STAR:{7EF8970F-F753-4c75-AD76-0E0D9C2CC9CD}"
{
	ML_STAR._7EF8970F_F753_4c75_AD76_0E0D9C2CC9CD("3885780b_dd30_405c_80020d4443a79325"); // EasyCOREGripTransport
}
// }} ""
// {{ 89 1 0 "1dff355b_0d30_44e5_8723faf67146c7a1" "{B31F353E-5D80-11d4-A5EB-0050DA737D89}"
if( 0 == Incubation.SetTimer(1800) )
{
    MECC::RaiseRuntimeErrorEx(-1355939584, MECC::IDS::stepNameTimerStart, MECC::IDS::errorStepFailed, "", "HxMetEdCompCmd");
}
// }} ""
// {{ 90 1 0 "4c69fae6_9e09_4b6e_99b1a96eba9c2fbe" "{B31F353F-5D80-11d4-A5EB-0050DA737D89}"
if( 0 == Incubation.WaitTimer(hslTrue, hslTrue) )
{
    MECC::RaiseRuntimeErrorEx(-1339162368, MECC::IDS::stepNameTimerWait, MECC::IDS::errorStepFailed, "", "HxMetEdCompCmd");
}
// }} ""
// {{{ 91 1 0 "f154a2ee_2291_4fd9_8dd17931fb94a833" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
HSLHamHeaterShaker::StopTempCtrl(heaterID);
// }} ""
// {{{ 92 1 0 "9ed8d93a_bbc2_479a_a11c8cc4fac35545" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
HSLHamHeaterShaker::Terminate();
// }} ""
// {{ 93 1 0 "a484dd7e_5af0_4e6c_845fd5be86ade426" "ML_STAR:{7EF8970F-F753-4c75-AD76-0E0D9C2CC9CD}"
{
	ML_STAR._7EF8970F_F753_4c75_AD76_0E0D9C2CC9CD("a484dd7e_5af0_4e6c_845fd5be86ade426"); // EasyCOREGripTransport
}
// }} ""
// {{{ 94 1 0 "5a93ced8_7ea1_44ec_b72ee27d5748a297" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
EASYPICK_HELPER::Camera_Place_to_BacterialPlate(ML_STAR, Translate("Nun_96_Fl_Hb_0001"));
// }} ""
// {{{ 95 1 0 "6c8076c3_48ce_4cf1_97a0a89c3cb67556" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
EASYPICK::APPLICATION::PictureFile_Take(Translate("D:\afterHeat.png"), 100, EASYPICK::PICTUREFILE::SAVEFORMAT::_PNG, EASYPICK::PICTUREFILE::COLORMODE::_COLOR);
// }} ""
// {{{ 5 "HeatAndQC" "End"
}
// }} ""
// {{{ 5 "QCAliquotWIP" "Begin"
private function QCAliquotWIP(  ) void {
// }} ""
// {{ 5 "QCAliquotWIP" "InitLocals"
// }} ""
// {{ 134 1 0 "fa87d215_9df7_4a0d_96638061342179ff" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{ 135 1 0 "617415fd_a429_4dc5_ae5c268a0383aa07" "{B31F353C-5D80-11d4-A5EB-0050DA737D89}"
ML_STAR.QC_Plate_Col_1.SetCount(2);
// }} ""
// {{ 136 1 0 "35af5841_c380_435e_9cd33ab134d7c902" "{B558D25C-EB8A-4a43-8878-125E1847965C}"
PTL::ResetPipettingStateAndSequences("");
PTL::SetPipettingState("UserResponseTime", hslInfinite);
PTL::SetPipettingState("ErrorHandling", 3);
PTL::SetPipettingState("TipCountingEnabled", hslFalse);
PTL::SetPipettingState("TipCountingIdentifier", "");
PTL::SetPipettingState("CopyPatternEnabled", hslFalse);
PTL::SetPipettingState("ExcludeErrorPositionsEnabled", hslFalse);
PTL::SetPipettingState("CalibrateCarrierChannel", -1);
PTL::SetPipettingState("InitializeChannelVariable", "");
PTL::SetPipettingState("InitializeEnabled", hslTrue);
PTL::SetPipettingState("TipPickupChannelVariable", "");
PTL::SetPipettingState("TipPickupEnabled", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReloadable", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReducible", hslTrue);
PTL::SetPipettingState("TipEjectChannelVariable", "");
PTL::SetPipettingState("AspirateMode", 0);
PTL::SetPipettingState("AspirateCLLDSensitivity", 5);
PTL::SetPipettingState("AspirateFluidHeight", 0);
PTL::SetPipettingState("AspirateSubmergeDepth", 2);
PTL::SetPipettingState("AspirateChannelVariable", "");
PTL::SetPipettingState("AspirateMaxHeightDiff", 0);
PTL::SetPipettingState("AspiratePLLDSensitivity", 0);
PTL::SetPipettingState("AspirateLiquidFollowing", hslTrue);
PTL::SetPipettingState("AspirateUserDefinedLiquidClass", "StandardVolume_Water_DispenseJet_Empty");
PTL::SetPipettingState("AspirateSequenceReloadable", hslFalse);
PTL::SetPipettingState("AspirateSequenceReducible", hslFalse);
PTL::SetPipettingState("AspirateSequenceCurrentInitialization", -10);
PTL::SetPipettingState("AspirateSequenceCurrentFinalization", -7);
PTL::SetPipettingState("AspirateSequenceCountInitialization", -9);
PTL::SetPipettingState("AspirateSequenceCountFinalization", -8);
PTL::SetPipettingState("AspirateSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseSubmergeDepth", 0);
PTL::SetPipettingState("DispenseChannelVariable", "");
PTL::SetPipettingState("DispenseCLLDSensitivity", 0);
PTL::SetPipettingState("DispenseFluidHeight", 5);
PTL::SetPipettingState("DispenseMode", 1);
PTL::SetPipettingState("DispenseLiquidFollowing", hslTrue);
PTL::SetPipettingState("DispenseUserDefinedLiquidClass", "StandardVolume_Water_DispenseJet_Empty");
PTL::SetPipettingState("DispenseSequenceReloadable", hslFalse);
PTL::SetPipettingState("DispenseSequenceReducible", hslFalse);
PTL::SetPipettingState("DispenseSequenceCurrentInitialization", -10);
PTL::SetPipettingState("DispenseSequenceCurrentFinalization", -7);
PTL::SetPipettingState("DispenseSequenceCountInitialization", -10);
PTL::SetPipettingState("DispenseSequenceCountFinalization", -8);
PTL::SetPipettingState("DispenseSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseRestVolumeDestination", 0);
PTL::SetPipettingState("DispenseRestVolumeToAspirateSequenceSurface", hslFalse);
PTL::SetPipettingState("DispenseRestVolumeFluidHeight", 0);
if( 0 == PTL::Pipette(ML_STAR, ML_STAR.ST_L_NE_stack_0001, ML_STAR.MasterMixX8, ML_STAR.QC_Plate_Col_1, 1, 1, 22, 0, 2, hslInfinite, hslInfinite, 1, "") )
{
    PTL::RaiseRuntimeError(-1573650176, PTL::IDS::smartStepPipette, PTL::IDS::smartStepFailed, "HxGRUCompCmd");
}
// }} ""
// {{ 137 1 0 "62e21ffe_fb22_4dac_81f3a9c5b58e70d9" "{B558D25C-EB8A-4a43-8878-125E1847965C}"
PTL::ResetPipettingStateAndSequences("");
PTL::SetPipettingState("UserResponseTime", hslInfinite);
PTL::SetPipettingState("ErrorHandling", 3);
PTL::SetPipettingState("TipCountingEnabled", hslFalse);
PTL::SetPipettingState("TipCountingIdentifier", "");
PTL::SetPipettingState("CopyPatternEnabled", hslFalse);
PTL::SetPipettingState("ExcludeErrorPositionsEnabled", hslFalse);
PTL::SetPipettingState("CalibrateCarrierChannel", -1);
PTL::SetPipettingState("InitializeChannelVariable", "");
PTL::SetPipettingState("InitializeEnabled", hslTrue);
PTL::SetPipettingState("TipPickupChannelVariable", "");
PTL::SetPipettingState("TipPickupEnabled", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReloadable", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReducible", hslTrue);
PTL::SetPipettingState("TipEjectChannelVariable", "");
PTL::SetPipettingState("AspirateMode", 0);
PTL::SetPipettingState("AspirateCLLDSensitivity", 5);
PTL::SetPipettingState("AspirateFluidHeight", 0);
PTL::SetPipettingState("AspirateSubmergeDepth", 2);
PTL::SetPipettingState("AspirateChannelVariable", "");
PTL::SetPipettingState("AspirateMaxHeightDiff", 0);
PTL::SetPipettingState("AspiratePLLDSensitivity", 0);
PTL::SetPipettingState("AspirateLiquidFollowing", hslTrue);
PTL::SetPipettingState("AspirateUserDefinedLiquidClass", "StandardVolume_Water_DispenseJet_Empty");
PTL::SetPipettingState("AspirateSequenceReloadable", hslFalse);
PTL::SetPipettingState("AspirateSequenceReducible", hslFalse);
PTL::SetPipettingState("AspirateSequenceCurrentInitialization", -10);
PTL::SetPipettingState("AspirateSequenceCurrentFinalization", -7);
PTL::SetPipettingState("AspirateSequenceCountInitialization", -9);
PTL::SetPipettingState("AspirateSequenceCountFinalization", -8);
PTL::SetPipettingState("AspirateSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseSubmergeDepth", 0);
PTL::SetPipettingState("DispenseChannelVariable", "");
PTL::SetPipettingState("DispenseCLLDSensitivity", 0);
PTL::SetPipettingState("DispenseFluidHeight", 5);
PTL::SetPipettingState("DispenseMode", 1);
PTL::SetPipettingState("DispenseLiquidFollowing", hslTrue);
PTL::SetPipettingState("DispenseUserDefinedLiquidClass", "StandardVolume_Water_DispenseJet_Empty");
PTL::SetPipettingState("DispenseSequenceReloadable", hslFalse);
PTL::SetPipettingState("DispenseSequenceReducible", hslFalse);
PTL::SetPipettingState("DispenseSequenceCurrentInitialization", -10);
PTL::SetPipettingState("DispenseSequenceCurrentFinalization", -7);
PTL::SetPipettingState("DispenseSequenceCountInitialization", -10);
PTL::SetPipettingState("DispenseSequenceCountFinalization", -8);
PTL::SetPipettingState("DispenseSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseRestVolumeDestination", 0);
PTL::SetPipettingState("DispenseRestVolumeToAspirateSequenceSurface", hslFalse);
PTL::SetPipettingState("DispenseRestVolumeFluidHeight", 0);
if( 0 == PTL::Pipette(ML_STAR, ML_STAR.ST_L_NE_stack_0001, ML_STAR.MasterMixX8, ML_STAR.QC_Plate_Col_1, 1, 1, 22, 0, 2, hslInfinite, hslInfinite, 1, "") )
{
    PTL::RaiseRuntimeError(-1573650176, PTL::IDS::smartStepPipette, PTL::IDS::smartStepFailed, "HxGRUCompCmd");
}
// }} ""
// {{ 138 1 0 "9096775f_1e6f_4b9e_b3bc28b7f265f93c" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
/* {{ 1 "" "0" */ if(0){  /* }} "" */
// {{ 139 1 0 "9921cb42_d6cf_418e_902436081eedb1f3" "{B558D25C-EB8A-4a43-8878-125E1847965C}"
PTL::ResetPipettingStateAndSequences("");
PTL::SetPipettingState("UserResponseTime", hslInfinite);
PTL::SetPipettingState("ErrorHandling", 3);
PTL::SetPipettingState("TipCountingEnabled", hslFalse);
PTL::SetPipettingState("TipCountingIdentifier", "");
PTL::SetPipettingState("CopyPatternEnabled", hslFalse);
PTL::SetPipettingState("ExcludeErrorPositionsEnabled", hslFalse);
PTL::SetPipettingState("CalibrateCarrierChannel", -1);
PTL::SetPipettingState("InitializeChannelVariable", "");
PTL::SetPipettingState("InitializeEnabled", hslTrue);
PTL::SetPipettingState("TipPickupChannelVariable", "");
PTL::SetPipettingState("TipPickupEnabled", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReloadable", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReducible", hslTrue);
PTL::SetPipettingState("TipEjectChannelVariable", "");
PTL::SetPipettingState("AspirateMode", 0);
PTL::SetPipettingState("AspirateCLLDSensitivity", 5);
PTL::SetPipettingState("AspirateFluidHeight", 0);
PTL::SetPipettingState("AspirateSubmergeDepth", 2);
PTL::SetPipettingState("AspirateChannelVariable", "");
PTL::SetPipettingState("AspirateMaxHeightDiff", 0);
PTL::SetPipettingState("AspiratePLLDSensitivity", 0);
PTL::SetPipettingState("AspirateLiquidFollowing", hslTrue);
PTL::SetPipettingState("AspirateUserDefinedLiquidClass", "StandardVolume_Water_DispenseJet_Empty");
PTL::SetPipettingState("AspirateSequenceReloadable", hslFalse);
PTL::SetPipettingState("AspirateSequenceReducible", hslFalse);
PTL::SetPipettingState("AspirateSequenceCurrentInitialization", -9);
PTL::SetPipettingState("AspirateSequenceCurrentFinalization", -7);
PTL::SetPipettingState("AspirateSequenceCountInitialization", -9);
PTL::SetPipettingState("AspirateSequenceCountFinalization", -8);
PTL::SetPipettingState("AspirateSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseSubmergeDepth", 0);
PTL::SetPipettingState("DispenseChannelVariable", "");
PTL::SetPipettingState("DispenseCLLDSensitivity", 0);
PTL::SetPipettingState("DispenseFluidHeight", 5);
PTL::SetPipettingState("DispenseMode", 1);
PTL::SetPipettingState("DispenseLiquidFollowing", hslTrue);
PTL::SetPipettingState("DispenseUserDefinedLiquidClass", "StandardVolume_Water_DispenseJet_Empty");
PTL::SetPipettingState("DispenseSequenceReloadable", hslFalse);
PTL::SetPipettingState("DispenseSequenceReducible", hslFalse);
PTL::SetPipettingState("DispenseSequenceCurrentInitialization", -10);
PTL::SetPipettingState("DispenseSequenceCurrentFinalization", -7);
PTL::SetPipettingState("DispenseSequenceCountInitialization", -10);
PTL::SetPipettingState("DispenseSequenceCountFinalization", -8);
PTL::SetPipettingState("DispenseSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseRestVolumeDestination", 0);
PTL::SetPipettingState("DispenseRestVolumeToAspirateSequenceSurface", hslFalse);
PTL::SetPipettingState("DispenseRestVolumeFluidHeight", 0);
if( 0 == PTL::Pipette(ML_STAR, ML_STAR.ST_L_NE_stack_0001, ML_STAR.QC_Plate_Col_1, ML_STAR.QC_Plate_Col_2, 1, 1, 2, 0, 1, hslInfinite, hslInfinite, 1, "") )
{
    PTL::RaiseRuntimeError(-1573650176, PTL::IDS::smartStepPipette, PTL::IDS::smartStepFailed, "HxGRUCompCmd");
}
// }} ""
// {{ 140 1 0 "b8849067_51f3_4188_97f9035100e2bdae" "{B558D25C-EB8A-4a43-8878-125E1847965C}"
PTL::ResetPipettingStateAndSequences("");
PTL::SetPipettingState("UserResponseTime", hslInfinite);
PTL::SetPipettingState("ErrorHandling", 3);
PTL::SetPipettingState("TipCountingEnabled", hslFalse);
PTL::SetPipettingState("TipCountingIdentifier", "");
PTL::SetPipettingState("CopyPatternEnabled", hslFalse);
PTL::SetPipettingState("ExcludeErrorPositionsEnabled", hslFalse);
PTL::SetPipettingState("CalibrateCarrierChannel", -1);
PTL::SetPipettingState("InitializeChannelVariable", "");
PTL::SetPipettingState("InitializeEnabled", hslTrue);
PTL::SetPipettingState("TipPickupChannelVariable", "");
PTL::SetPipettingState("TipPickupEnabled", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReloadable", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReducible", hslTrue);
PTL::SetPipettingState("TipEjectChannelVariable", "");
PTL::SetPipettingState("AspirateMode", 0);
PTL::SetPipettingState("AspirateCLLDSensitivity", 5);
PTL::SetPipettingState("AspirateFluidHeight", 0);
PTL::SetPipettingState("AspirateSubmergeDepth", 2);
PTL::SetPipettingState("AspirateChannelVariable", "");
PTL::SetPipettingState("AspirateMaxHeightDiff", 0);
PTL::SetPipettingState("AspiratePLLDSensitivity", 0);
PTL::SetPipettingState("AspirateLiquidFollowing", hslTrue);
PTL::SetPipettingState("AspirateUserDefinedLiquidClass", "StandardVolume_Water_DispenseSurface_Empty");
PTL::SetPipettingState("AspirateSequenceReloadable", hslFalse);
PTL::SetPipettingState("AspirateSequenceReducible", hslFalse);
PTL::SetPipettingState("AspirateSequenceCurrentInitialization", -9);
PTL::SetPipettingState("AspirateSequenceCurrentFinalization", -7);
PTL::SetPipettingState("AspirateSequenceCountInitialization", -9);
PTL::SetPipettingState("AspirateSequenceCountFinalization", -8);
PTL::SetPipettingState("AspirateSequenceCalibration", hslTrue);
PTL::SetPipettingState("AspiratePrerinsingMixCycles", 2);
PTL::SetPipettingState("AspiratePrerinsingMixPosition", 1);
PTL::SetPipettingState("AspiratePrerinsingMixVolume", 10);
PTL::SetPipettingState("DispenseSubmergeDepth", 0);
PTL::SetPipettingState("DispenseChannelVariable", "");
PTL::SetPipettingState("DispenseCLLDSensitivity", 0);
PTL::SetPipettingState("DispenseFluidHeight", 5);
PTL::SetPipettingState("DispenseMode", 3);
PTL::SetPipettingState("DispenseLiquidFollowing", hslTrue);
PTL::SetPipettingState("DispenseUserDefinedLiquidClass", "StandardVolume_Water_DispenseSurface_Empty");
PTL::SetPipettingState("DispenseSequenceReloadable", hslFalse);
PTL::SetPipettingState("DispenseSequenceReducible", hslFalse);
PTL::SetPipettingState("DispenseSequenceCurrentInitialization", -9);
PTL::SetPipettingState("DispenseSequenceCurrentFinalization", -7);
PTL::SetPipettingState("DispenseSequenceCountInitialization", -9);
PTL::SetPipettingState("DispenseSequenceCountFinalization", -8);
PTL::SetPipettingState("DispenseSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseRestVolumeDestination", 0);
PTL::SetPipettingState("DispenseRestVolumeToAspirateSequenceSurface", hslFalse);
PTL::SetPipettingState("DispenseRestVolumeFluidHeight", 0);
PTL::SetPipettingState("DispensePrerinsingMixCycles", 2);
PTL::SetPipettingState("DispensePrerinsingMixPosition", 1);
PTL::SetPipettingState("DispensePrerinsingMixVolume", 10);
if( 0 == PTL::Pipette(ML_STAR, ML_STAR.ST_L_NE_stack_0001, ML_STAR.waterX8, ML_STAR.QC_Plate_Col_2, 1, 1, 2, 0, 1, hslInfinite, hslInfinite, 1, "") )
{
    PTL::RaiseRuntimeError(-1573650176, PTL::IDS::smartStepPipette, PTL::IDS::smartStepFailed, "HxGRUCompCmd");
}
// }} ""
// {{ 141 1 0 "35449ec4_732c_4c5d_9c1d07cc48802284" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{ 142 1 0 "bff546e6_80cc_42c9_9eeba0ada60795a0" "{B558D25C-EB8A-4a43-8878-125E1847965C}"
PTL::ResetPipettingStateAndSequences("");
PTL::SetPipettingState("UserResponseTime", hslInfinite);
PTL::SetPipettingState("ErrorHandling", 3);
PTL::SetPipettingState("TipCountingEnabled", hslFalse);
PTL::SetPipettingState("TipCountingIdentifier", "");
PTL::SetPipettingState("CopyPatternEnabled", hslFalse);
PTL::SetPipettingState("ExcludeErrorPositionsEnabled", hslFalse);
PTL::SetPipettingState("CalibrateCarrierChannel", -1);
PTL::SetPipettingState("InitializeChannelVariable", "");
PTL::SetPipettingState("InitializeEnabled", hslTrue);
PTL::SetPipettingState("TipPickupChannelVariable", "");
PTL::SetPipettingState("TipPickupEnabled", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReloadable", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReducible", hslTrue);
PTL::SetPipettingState("TipEjectChannelVariable", "");
PTL::SetPipettingState("AspirateMode", 0);
PTL::SetPipettingState("AspirateCLLDSensitivity", 5);
PTL::SetPipettingState("AspirateFluidHeight", 0);
PTL::SetPipettingState("AspirateSubmergeDepth", 2);
PTL::SetPipettingState("AspirateChannelVariable", "");
PTL::SetPipettingState("AspirateMaxHeightDiff", 0);
PTL::SetPipettingState("AspiratePLLDSensitivity", 0);
PTL::SetPipettingState("AspirateLiquidFollowing", hslTrue);
PTL::SetPipettingState("AspirateUserDefinedLiquidClass", "StandardVolume_Water_DispenseJet_Empty");
PTL::SetPipettingState("AspirateSequenceReloadable", hslFalse);
PTL::SetPipettingState("AspirateSequenceReducible", hslFalse);
PTL::SetPipettingState("AspirateSequenceCurrentInitialization", -9);
PTL::SetPipettingState("AspirateSequenceCurrentFinalization", -7);
PTL::SetPipettingState("AspirateSequenceCountInitialization", -9);
PTL::SetPipettingState("AspirateSequenceCountFinalization", -8);
PTL::SetPipettingState("AspirateSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseSubmergeDepth", 0);
PTL::SetPipettingState("DispenseChannelVariable", "");
PTL::SetPipettingState("DispenseCLLDSensitivity", 0);
PTL::SetPipettingState("DispenseFluidHeight", 5);
PTL::SetPipettingState("DispenseMode", 1);
PTL::SetPipettingState("DispenseLiquidFollowing", hslTrue);
PTL::SetPipettingState("DispenseUserDefinedLiquidClass", "StandardVolume_Water_DispenseJet_Empty");
PTL::SetPipettingState("DispenseSequenceReloadable", hslFalse);
PTL::SetPipettingState("DispenseSequenceReducible", hslFalse);
PTL::SetPipettingState("DispenseSequenceCurrentInitialization", -10);
PTL::SetPipettingState("DispenseSequenceCurrentFinalization", -7);
PTL::SetPipettingState("DispenseSequenceCountInitialization", -10);
PTL::SetPipettingState("DispenseSequenceCountFinalization", -8);
PTL::SetPipettingState("DispenseSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseRestVolumeDestination", 0);
PTL::SetPipettingState("DispenseRestVolumeToAspirateSequenceSurface", hslFalse);
PTL::SetPipettingState("DispenseRestVolumeFluidHeight", 0);
if( 0 == PTL::Pipette(ML_STAR, ML_STAR.ST_L_NE_stack_0001, ML_STAR.QC_Plate_Col_2, ML_STAR.QC_Plate_Col_3, 1, 1, 2, 0, 1, hslInfinite, hslInfinite, 1, "") )
{
    PTL::RaiseRuntimeError(-1573650176, PTL::IDS::smartStepPipette, PTL::IDS::smartStepFailed, "HxGRUCompCmd");
}
// }} ""
// {{ 143 1 0 "c1bc1491_d322_40a5_b409ed102bfa934b" "{B558D25C-EB8A-4a43-8878-125E1847965C}"
PTL::ResetPipettingStateAndSequences("");
PTL::SetPipettingState("UserResponseTime", hslInfinite);
PTL::SetPipettingState("ErrorHandling", 3);
PTL::SetPipettingState("TipCountingEnabled", hslFalse);
PTL::SetPipettingState("TipCountingIdentifier", "");
PTL::SetPipettingState("CopyPatternEnabled", hslFalse);
PTL::SetPipettingState("ExcludeErrorPositionsEnabled", hslFalse);
PTL::SetPipettingState("CalibrateCarrierChannel", -1);
PTL::SetPipettingState("InitializeChannelVariable", "");
PTL::SetPipettingState("InitializeEnabled", hslTrue);
PTL::SetPipettingState("TipPickupChannelVariable", "");
PTL::SetPipettingState("TipPickupEnabled", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReloadable", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReducible", hslTrue);
PTL::SetPipettingState("TipEjectChannelVariable", "");
PTL::SetPipettingState("AspirateMode", 0);
PTL::SetPipettingState("AspirateCLLDSensitivity", 5);
PTL::SetPipettingState("AspirateFluidHeight", 0);
PTL::SetPipettingState("AspirateSubmergeDepth", 2);
PTL::SetPipettingState("AspirateChannelVariable", "");
PTL::SetPipettingState("AspirateMaxHeightDiff", 0);
PTL::SetPipettingState("AspiratePLLDSensitivity", 0);
PTL::SetPipettingState("AspirateLiquidFollowing", hslTrue);
PTL::SetPipettingState("AspirateUserDefinedLiquidClass", "StandardVolume_Water_DispenseSurface_Empty");
PTL::SetPipettingState("AspirateSequenceReloadable", hslFalse);
PTL::SetPipettingState("AspirateSequenceReducible", hslFalse);
PTL::SetPipettingState("AspirateSequenceCurrentInitialization", -9);
PTL::SetPipettingState("AspirateSequenceCurrentFinalization", -7);
PTL::SetPipettingState("AspirateSequenceCountInitialization", -9);
PTL::SetPipettingState("AspirateSequenceCountFinalization", -8);
PTL::SetPipettingState("AspirateSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseSubmergeDepth", 0);
PTL::SetPipettingState("DispenseChannelVariable", "");
PTL::SetPipettingState("DispenseCLLDSensitivity", 0);
PTL::SetPipettingState("DispenseFluidHeight", 5);
PTL::SetPipettingState("DispenseMode", 3);
PTL::SetPipettingState("DispenseLiquidFollowing", hslTrue);
PTL::SetPipettingState("DispenseUserDefinedLiquidClass", "StandardVolume_Water_DispenseSurface_Empty");
PTL::SetPipettingState("DispenseSequenceReloadable", hslFalse);
PTL::SetPipettingState("DispenseSequenceReducible", hslFalse);
PTL::SetPipettingState("DispenseSequenceCurrentInitialization", -9);
PTL::SetPipettingState("DispenseSequenceCurrentFinalization", -7);
PTL::SetPipettingState("DispenseSequenceCountInitialization", -9);
PTL::SetPipettingState("DispenseSequenceCountFinalization", -8);
PTL::SetPipettingState("DispenseSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseRestVolumeDestination", 0);
PTL::SetPipettingState("DispenseRestVolumeToAspirateSequenceSurface", hslFalse);
PTL::SetPipettingState("DispenseRestVolumeFluidHeight", 0);
PTL::SetPipettingState("DispensePrerinsingMixCycles", 2);
PTL::SetPipettingState("DispensePrerinsingMixPosition", 1);
PTL::SetPipettingState("DispensePrerinsingMixVolume", 10);
if( 0 == PTL::Pipette(ML_STAR, ML_STAR.ST_L_NE_stack_0001, ML_STAR.waterX8, ML_STAR.QC_Plate_Col_3, 1, 1, 20, 0, 1, hslInfinite, hslInfinite, 1, "") )
{
    PTL::RaiseRuntimeError(-1573650176, PTL::IDS::smartStepPipette, PTL::IDS::smartStepFailed, "HxGRUCompCmd");
}
// }} ""
// {{ 144 1 0 "8a46e059_ee9b_457b_a73a24c6604c3474" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{ 145 1 0 "a8d3f052_1e55_4ca2_824fd73292de3d37" "{B558D25C-EB8A-4a43-8878-125E1847965C}"
PTL::ResetPipettingStateAndSequences("");
PTL::SetPipettingState("UserResponseTime", hslInfinite);
PTL::SetPipettingState("ErrorHandling", 3);
PTL::SetPipettingState("TipCountingEnabled", hslFalse);
PTL::SetPipettingState("TipCountingIdentifier", "");
PTL::SetPipettingState("CopyPatternEnabled", hslFalse);
PTL::SetPipettingState("ExcludeErrorPositionsEnabled", hslFalse);
PTL::SetPipettingState("CalibrateCarrierChannel", -1);
PTL::SetPipettingState("InitializeChannelVariable", "");
PTL::SetPipettingState("InitializeEnabled", hslTrue);
PTL::SetPipettingState("TipPickupChannelVariable", "");
PTL::SetPipettingState("TipPickupEnabled", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReloadable", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReducible", hslTrue);
PTL::SetPipettingState("TipEjectChannelVariable", "");
PTL::SetPipettingState("AspirateMode", 0);
PTL::SetPipettingState("AspirateCLLDSensitivity", 5);
PTL::SetPipettingState("AspirateFluidHeight", 0);
PTL::SetPipettingState("AspirateSubmergeDepth", 2);
PTL::SetPipettingState("AspirateChannelVariable", "");
PTL::SetPipettingState("AspirateMaxHeightDiff", 0);
PTL::SetPipettingState("AspiratePLLDSensitivity", 0);
PTL::SetPipettingState("AspirateLiquidFollowing", hslTrue);
PTL::SetPipettingState("AspirateUserDefinedLiquidClass", "StandardVolume_Water_DispenseJet_Empty");
PTL::SetPipettingState("AspirateSequenceReloadable", hslFalse);
PTL::SetPipettingState("AspirateSequenceReducible", hslFalse);
PTL::SetPipettingState("AspirateSequenceCurrentInitialization", -9);
PTL::SetPipettingState("AspirateSequenceCurrentFinalization", -7);
PTL::SetPipettingState("AspirateSequenceCountInitialization", -9);
PTL::SetPipettingState("AspirateSequenceCountFinalization", -8);
PTL::SetPipettingState("AspirateSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseSubmergeDepth", 0);
PTL::SetPipettingState("DispenseChannelVariable", "");
PTL::SetPipettingState("DispenseCLLDSensitivity", 0);
PTL::SetPipettingState("DispenseFluidHeight", 5);
PTL::SetPipettingState("DispenseMode", 1);
PTL::SetPipettingState("DispenseLiquidFollowing", hslTrue);
PTL::SetPipettingState("DispenseUserDefinedLiquidClass", "StandardVolume_Water_DispenseJet_Empty");
PTL::SetPipettingState("DispenseSequenceReloadable", hslFalse);
PTL::SetPipettingState("DispenseSequenceReducible", hslFalse);
PTL::SetPipettingState("DispenseSequenceCurrentInitialization", -10);
PTL::SetPipettingState("DispenseSequenceCurrentFinalization", -7);
PTL::SetPipettingState("DispenseSequenceCountInitialization", -10);
PTL::SetPipettingState("DispenseSequenceCountFinalization", -8);
PTL::SetPipettingState("DispenseSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseRestVolumeDestination", 0);
PTL::SetPipettingState("DispenseRestVolumeToAspirateSequenceSurface", hslFalse);
PTL::SetPipettingState("DispenseRestVolumeFluidHeight", 0);
if( 0 == PTL::Pipette(ML_STAR, ML_STAR.ST_L_NE_stack_0001, ML_STAR.QC_Plate_Col_3, ML_STAR.QC_Plate_Col_4, 1, 1, 2, 0, 1, hslInfinite, hslInfinite, 1, "") )
{
    PTL::RaiseRuntimeError(-1573650176, PTL::IDS::smartStepPipette, PTL::IDS::smartStepFailed, "HxGRUCompCmd");
}
// }} ""
// {{ 146 1 0 "6bb08ba3_091d_4b01_ab677e5159a8cf18" "{B558D25C-EB8A-4a43-8878-125E1847965C}"
PTL::ResetPipettingStateAndSequences("");
PTL::SetPipettingState("UserResponseTime", hslInfinite);
PTL::SetPipettingState("ErrorHandling", 3);
PTL::SetPipettingState("TipCountingEnabled", hslFalse);
PTL::SetPipettingState("TipCountingIdentifier", "");
PTL::SetPipettingState("CopyPatternEnabled", hslFalse);
PTL::SetPipettingState("ExcludeErrorPositionsEnabled", hslFalse);
PTL::SetPipettingState("CalibrateCarrierChannel", -1);
PTL::SetPipettingState("InitializeChannelVariable", "");
PTL::SetPipettingState("InitializeEnabled", hslTrue);
PTL::SetPipettingState("TipPickupChannelVariable", "");
PTL::SetPipettingState("TipPickupEnabled", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReloadable", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReducible", hslTrue);
PTL::SetPipettingState("TipEjectChannelVariable", "");
PTL::SetPipettingState("AspirateMode", 0);
PTL::SetPipettingState("AspirateCLLDSensitivity", 5);
PTL::SetPipettingState("AspirateFluidHeight", 0);
PTL::SetPipettingState("AspirateSubmergeDepth", 2);
PTL::SetPipettingState("AspirateChannelVariable", "");
PTL::SetPipettingState("AspirateMaxHeightDiff", 0);
PTL::SetPipettingState("AspiratePLLDSensitivity", 0);
PTL::SetPipettingState("AspirateLiquidFollowing", hslTrue);
PTL::SetPipettingState("AspirateUserDefinedLiquidClass", "StandardVolume_Water_DispenseSurface_Empty");
PTL::SetPipettingState("AspirateSequenceReloadable", hslFalse);
PTL::SetPipettingState("AspirateSequenceReducible", hslFalse);
PTL::SetPipettingState("AspirateSequenceCurrentInitialization", -9);
PTL::SetPipettingState("AspirateSequenceCurrentFinalization", -7);
PTL::SetPipettingState("AspirateSequenceCountInitialization", -9);
PTL::SetPipettingState("AspirateSequenceCountFinalization", -8);
PTL::SetPipettingState("AspirateSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseSubmergeDepth", 0);
PTL::SetPipettingState("DispenseChannelVariable", "");
PTL::SetPipettingState("DispenseCLLDSensitivity", 0);
PTL::SetPipettingState("DispenseFluidHeight", 5);
PTL::SetPipettingState("DispenseMode", 3);
PTL::SetPipettingState("DispenseLiquidFollowing", hslTrue);
PTL::SetPipettingState("DispenseUserDefinedLiquidClass", "StandardVolume_Water_DispenseSurface_Empty");
PTL::SetPipettingState("DispenseSequenceReloadable", hslFalse);
PTL::SetPipettingState("DispenseSequenceReducible", hslFalse);
PTL::SetPipettingState("DispenseSequenceCurrentInitialization", -9);
PTL::SetPipettingState("DispenseSequenceCurrentFinalization", -7);
PTL::SetPipettingState("DispenseSequenceCountInitialization", -9);
PTL::SetPipettingState("DispenseSequenceCountFinalization", -8);
PTL::SetPipettingState("DispenseSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseRestVolumeDestination", 0);
PTL::SetPipettingState("DispenseRestVolumeToAspirateSequenceSurface", hslFalse);
PTL::SetPipettingState("DispenseRestVolumeFluidHeight", 0);
PTL::SetPipettingState("DispensePrerinsingMixCycles", 2);
PTL::SetPipettingState("DispensePrerinsingMixPosition", 1);
PTL::SetPipettingState("DispensePrerinsingMixVolume", 10);
if( 0 == PTL::Pipette(ML_STAR, ML_STAR.ST_L_NE_stack_0001, ML_STAR.waterX8, ML_STAR.QC_Plate_Col_4, 1, 1, 20, 0, 1, hslInfinite, hslInfinite, 1, "") )
{
    PTL::RaiseRuntimeError(-1573650176, PTL::IDS::smartStepPipette, PTL::IDS::smartStepFailed, "HxGRUCompCmd");
}
// }} ""
// {{ 147 1 0 "0c9d096b_6259_43cc_b9773f135f1354f6" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{ 148 1 0 "82989ca1_4876_4698_a7694ee6a7af3ea5" "{B558D25C-EB8A-4a43-8878-125E1847965C}"
PTL::ResetPipettingStateAndSequences("");
PTL::SetPipettingState("UserResponseTime", hslInfinite);
PTL::SetPipettingState("ErrorHandling", 3);
PTL::SetPipettingState("TipCountingEnabled", hslFalse);
PTL::SetPipettingState("TipCountingIdentifier", "");
PTL::SetPipettingState("CopyPatternEnabled", hslFalse);
PTL::SetPipettingState("ExcludeErrorPositionsEnabled", hslFalse);
PTL::SetPipettingState("CalibrateCarrierChannel", -1);
PTL::SetPipettingState("InitializeChannelVariable", "");
PTL::SetPipettingState("InitializeEnabled", hslTrue);
PTL::SetPipettingState("TipPickupChannelVariable", "");
PTL::SetPipettingState("TipPickupEnabled", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReloadable", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReducible", hslTrue);
PTL::SetPipettingState("TipEjectChannelVariable", "");
PTL::SetPipettingState("AspirateMode", 0);
PTL::SetPipettingState("AspirateCLLDSensitivity", 5);
PTL::SetPipettingState("AspirateFluidHeight", 0);
PTL::SetPipettingState("AspirateSubmergeDepth", 2);
PTL::SetPipettingState("AspirateChannelVariable", "");
PTL::SetPipettingState("AspirateMaxHeightDiff", 0);
PTL::SetPipettingState("AspiratePLLDSensitivity", 0);
PTL::SetPipettingState("AspirateLiquidFollowing", hslTrue);
PTL::SetPipettingState("AspirateUserDefinedLiquidClass", "StandardVolume_Water_DispenseJet_Empty");
PTL::SetPipettingState("AspirateSequenceReloadable", hslFalse);
PTL::SetPipettingState("AspirateSequenceReducible", hslFalse);
PTL::SetPipettingState("AspirateSequenceCurrentInitialization", -9);
PTL::SetPipettingState("AspirateSequenceCurrentFinalization", -7);
PTL::SetPipettingState("AspirateSequenceCountInitialization", -9);
PTL::SetPipettingState("AspirateSequenceCountFinalization", -8);
PTL::SetPipettingState("AspirateSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseSubmergeDepth", 0);
PTL::SetPipettingState("DispenseChannelVariable", "");
PTL::SetPipettingState("DispenseCLLDSensitivity", 0);
PTL::SetPipettingState("DispenseFluidHeight", 5);
PTL::SetPipettingState("DispenseMode", 1);
PTL::SetPipettingState("DispenseLiquidFollowing", hslTrue);
PTL::SetPipettingState("DispenseUserDefinedLiquidClass", "StandardVolume_Water_DispenseJet_Empty");
PTL::SetPipettingState("DispenseSequenceReloadable", hslFalse);
PTL::SetPipettingState("DispenseSequenceReducible", hslFalse);
PTL::SetPipettingState("DispenseSequenceCurrentInitialization", -9);
PTL::SetPipettingState("DispenseSequenceCurrentFinalization", -7);
PTL::SetPipettingState("DispenseSequenceCountInitialization", -9);
PTL::SetPipettingState("DispenseSequenceCountFinalization", -8);
PTL::SetPipettingState("DispenseSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseRestVolumeDestination", 0);
PTL::SetPipettingState("DispenseRestVolumeToAspirateSequenceSurface", hslFalse);
PTL::SetPipettingState("DispenseRestVolumeFluidHeight", 0);
if( 0 == PTL::Pipette(ML_STAR, ML_STAR.ST_L_NE_stack_0001, ML_STAR.QC_Plate_Col_4, ML_STAR.QC_Plate_Col_5, 1, 1, 2, 0, 1, hslInfinite, hslInfinite, 1, "") )
{
    PTL::RaiseRuntimeError(-1573650176, PTL::IDS::smartStepPipette, PTL::IDS::smartStepFailed, "HxGRUCompCmd");
}
// }} ""
// {{ 149 1 0 "6d3f32aa_1c9b_483c_b62b8c229712d984" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
/* {{ 1 "" "1" */ } /* }} "" */
// {{{ 5 "QCAliquotWIP" "End"
}
// }} ""
// {{{ 5 "BatchAliquot" "Begin"
private function BatchAliquot( variable NrStacks ) void {
// }} ""
private sequence AliquotSeq[];
private sequence stackSeqs[];
private variable AliquotNrPlates;
private variable Stack;
private variable CurPosInStackSeqs;
private variable NumberOfSeq;
private variable CurSeq;
private variable CurStackDepth;
// {{ 5 "BatchAliquot" "InitLocals"
// }} ""
// {{ 14 1 0 "8d322be3_66e8_4571_b0dba05f479e90ac" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{ 15 1 0 "b996d9bc_5631_4ef9_a5d1b2037241ff2d" "{4900C1F7-0FB7-4033-8253-760BDB9354DC}"
stackSeqs.SetSize(0);
// }} ""
// {{ 16 1 0 "bac3f1c0_3ded_46b7_aeec34ea50e1bc9c" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{ 17 1 0 "bcee5e32_7d60_46d2_b97c7d229c3edff0" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
if (NrStacks >= 1)
{
// }} ""
// {{ 18 1 0 "2dcaf2b7_6dec_4bd1_b7c4bb924899625b" "{F17B7626-27CB-47f1-8477-8C4158339A6D}"
stackSeqs.AddAsLast(ML_STAR.Stack_1_0005);
// }} ""
// {{ 19 1 0 "a30fc133_b147_4863_958f861ab1378c3a" "{F17B7626-27CB-47f1-8477-8C4158339A6D}"
stackSeqs.AddAsLast(ML_STAR.Stack_1_0004);
// }} ""
// {{ 20 1 0 "3ed3674c_656c_4ee5_b3e6e79a5ed03557" "{F17B7626-27CB-47f1-8477-8C4158339A6D}"
stackSeqs.AddAsLast(ML_STAR.Stack_1_0003);
// }} ""
// {{ 21 1 0 "8214c1b5_41ed_4fb4_8c5e6f2f4ac18612" "{F17B7626-27CB-47f1-8477-8C4158339A6D}"
stackSeqs.AddAsLast(ML_STAR.Stack_1_0002);
// }} ""
// {{ 22 1 0 "17da73e0_9d0e_4283_b1c3e4955c4a597d" "{F17B7626-27CB-47f1-8477-8C4158339A6D}"
stackSeqs.AddAsLast(ML_STAR.Stack_1_0001);
// }} ""
// {{ 23 1 0 "bcee5e32_7d60_46d2_b97c7d229c3edff0" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
}
// }} ""
// {{ 24 1 0 "cf23d33f_c1c3_4ea3_927e09d540a750ab" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
if (NrStacks == 5)
{
// }} ""
// {{ 25 1 0 "30da5579_7687_4bcf_a283369e79da41fe" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{ 26 1 0 "a0fa1bb6_4ce9_46ab_9a91234912275042" "{F17B7626-27CB-47f1-8477-8C4158339A6D}"
stackSeqs.AddAsLast(ML_STAR.Stack_2_0005);
// }} ""
// {{ 27 1 0 "2564e8ea_e262_48d0_9b81fcd4973422e1" "{F17B7626-27CB-47f1-8477-8C4158339A6D}"
stackSeqs.AddAsLast(ML_STAR.Stack_2_0004);
// }} ""
// {{ 28 1 0 "e283f071_3848_4cfd_9566f90906ceb91f" "{F17B7626-27CB-47f1-8477-8C4158339A6D}"
stackSeqs.AddAsLast(ML_STAR.Stack_2_0003);
// }} ""
// {{ 29 1 0 "27fce54b_79fb_4f69_890277c39c0a0802" "{F17B7626-27CB-47f1-8477-8C4158339A6D}"
stackSeqs.AddAsLast(ML_STAR.Stack_2_0002);
// }} ""
// {{ 30 1 0 "92bed0fa_395b_4296_9f2199e637028b4e" "{F17B7626-27CB-47f1-8477-8C4158339A6D}"
stackSeqs.AddAsLast(ML_STAR.Stack_2_0001);
// }} ""
// {{ 31 1 0 "ba456c24_d1b3_487b_91516e0e2141f922" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{ 32 1 0 "640079f0_0615_4593_889fe7af8b072f8a" "{F17B7626-27CB-47f1-8477-8C4158339A6D}"
stackSeqs.AddAsLast(ML_STAR.Stack_3_0005);
// }} ""
// {{ 33 1 0 "832fa5b7_a8a8_4228_b7651e7b7b8d7d67" "{F17B7626-27CB-47f1-8477-8C4158339A6D}"
stackSeqs.AddAsLast(ML_STAR.Stack_3_0004);
// }} ""
// {{ 34 1 0 "3d10ebb9_6ee7_433f_87db1c55f007ac9a" "{F17B7626-27CB-47f1-8477-8C4158339A6D}"
stackSeqs.AddAsLast(ML_STAR.Stack_3_0003);
// }} ""
// {{ 35 1 0 "5b7c308e_abbb_499b_aa9c574fadb32694" "{F17B7626-27CB-47f1-8477-8C4158339A6D}"
stackSeqs.AddAsLast(ML_STAR.Stack_3_0002);
// }} ""
// {{ 36 1 0 "ddae7d72_fd82_479a_b573c5bb302e838b" "{F17B7626-27CB-47f1-8477-8C4158339A6D}"
stackSeqs.AddAsLast(ML_STAR.Stack_3_0001);
// }} ""
// {{ 37 1 0 "ce480196_bb8e_4290_9f34e07668a2f8a4" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{ 38 1 0 "c83895f3_0c78_4938_81058da790edc901" "{F17B7626-27CB-47f1-8477-8C4158339A6D}"
stackSeqs.AddAsLast(ML_STAR.Stack_4_0005);
// }} ""
// {{ 39 1 0 "89af1f5a_149f_41be_903eef14fcfa7d77" "{F17B7626-27CB-47f1-8477-8C4158339A6D}"
stackSeqs.AddAsLast(ML_STAR.Stack_4_0004);
// }} ""
// {{ 40 1 0 "cc7cb595_8dd2_49ba_801cedae5e60792f" "{F17B7626-27CB-47f1-8477-8C4158339A6D}"
stackSeqs.AddAsLast(ML_STAR.Stack_4_0003);
// }} ""
// {{ 41 1 0 "bb5d5cfe_94d9_4fdf_80ee153ccfcf3742" "{F17B7626-27CB-47f1-8477-8C4158339A6D}"
stackSeqs.AddAsLast(ML_STAR.Stack_4_0002);
// }} ""
// {{ 42 1 0 "d710b9d7_7889_4c0f_95f4614869ea3a76" "{F17B7626-27CB-47f1-8477-8C4158339A6D}"
stackSeqs.AddAsLast(ML_STAR.Stack_4_0001);
// }} ""
// {{ 43 1 0 "b434a093_ea66_4d93_91731afbf9f866d0" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{ 44 1 0 "162d94d8_99b6_4be8_82fcc37f4a018040" "{F17B7626-27CB-47f1-8477-8C4158339A6D}"
stackSeqs.AddAsLast(ML_STAR.Stack_5_0005);
// }} ""
// {{ 45 1 0 "5bed9dba_7d2c_4bbb_8c25e69ea9078c22" "{F17B7626-27CB-47f1-8477-8C4158339A6D}"
stackSeqs.AddAsLast(ML_STAR.Stack_5_0004);
// }} ""
// {{ 46 1 0 "32516cad_dc85_45c0_98edb719233ad57b" "{F17B7626-27CB-47f1-8477-8C4158339A6D}"
stackSeqs.AddAsLast(ML_STAR.Stack_5_0003);
// }} ""
// {{ 47 1 0 "22264763_05ae_4164_8ff857b281b3be26" "{F17B7626-27CB-47f1-8477-8C4158339A6D}"
stackSeqs.AddAsLast(ML_STAR.Stack_5_0002);
// }} ""
// {{ 48 1 0 "dec6a009_c1cb_4d1b_ac41250dc31d9c73" "{F17B7626-27CB-47f1-8477-8C4158339A6D}"
stackSeqs.AddAsLast(ML_STAR.Stack_5_0001);
// }} ""
// {{ 49 1 0 "cf23d33f_c1c3_4ea3_927e09d540a750ab" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
}
// }} ""
// {{ 50 1 0 "99d8a44f_542f_44d1_878b1f8758f2acd1" "{72EACF88-8D49-43e3-92C8-2F90E81E3260}"
NumberOfSeq=AliquotSeq.GetSize();
// }} ""
// {{ 51 1 0 "e048ed96_5459_4e98_8f173a739a92d171" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{ 52 1 0 "3c0ea24b_7423_471e_abd83c627b1fa1d5" "{4900C1F7-0FB7-4033-8253-760BDB9354DC}"
AliquotSeq.SetSize(0);
// }} ""
// {{ 53 1 0 "9d1d6e55_8ba1_446e_aaca70fb39e54faf" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
if (0 == 1)
{
// }} ""
// {{ 54 1 0 "9d1d6e55_8ba1_446e_aaca70fb39e54faf" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
}
else
{
// }} ""
// {{ 55 1 0 "d4453bc6_1a60_4df2_8f519466885a6261" "{F17B7626-27CB-47f1-8477-8C4158339A6D}"
AliquotSeq.AddAsLast(ML_STAR.Nun_96_Fl_Hb_0001);
// }} ""
// {{ 56 1 0 "fed1156a_709a_4acb_8797327e32dcd63f" "{F17B7626-27CB-47f1-8477-8C4158339A6D}"
AliquotSeq.AddAsLast(ML_STAR.Nun_96_Fl_Hb_0002);
// }} ""
// {{ 57 1 0 "2c08017f_3131_44dc_a6eb477b80429372" "{F17B7626-27CB-47f1-8477-8C4158339A6D}"
AliquotSeq.AddAsLast(ML_STAR.Nun_96_Fl_Hb_0003);
// }} ""
// {{ 58 1 0 "76d88a6e_37d2_4bbd_a894e3d008772a1c" "{F17B7626-27CB-47f1-8477-8C4158339A6D}"
AliquotSeq.AddAsLast(ML_STAR.Nun_96_Fl_Hb_0004);
// }} ""
// {{ 59 1 0 "7aa05f52_2980_413e_9555ce9cd951a4d1" "{F17B7626-27CB-47f1-8477-8C4158339A6D}"
AliquotSeq.AddAsLast(ML_STAR.Nun_96_Fl_Hb_0005);
// }} ""
// {{ 60 1 0 "9d1d6e55_8ba1_446e_aaca70fb39e54faf" "{B31F3531-5D80-11d4-A5EB-0050DA737D89}"
}
// }} ""
// {{ 61 1 0 "f4e119a3_974d_49c2_94c2f42d1d246283" "{72EACF88-8D49-43e3-92C8-2F90E81E3260}"
AliquotNrPlates=AliquotSeq.GetSize();
// }} ""
// {{ 62 1 0 "c4d7d064_e130_4280_af1c6bf0af531f1e" "ML_STAR:{E91EFCB6-A447-4dfc-828E-7EBF29139CD2}"
{
	ML_STAR._E91EFCB6_A447_4dfc_828E_7EBF29139CD2("c4d7d064_e130_4280_af1c6bf0af531f1e"); // EasyAspirate
}
// }} ""
// {{ 63 1 0 "df339b87_6e75_45bd_b3a8082485b48fdf" "ML_STAR:{01571348-0D66-4d27-9E97-65F9EE27C956}"
{
	ML_STAR._01571348_0D66_4d27_9E97_65F9EE27C956("df339b87_6e75_45bd_b3a8082485b48fdf"); // EasyDispense
}
// }} ""
// {{ 64 1 0 "96fa5f10_8bdf_48cd_9f3555033c519519" "{B31F3532-5D80-11d4-A5EB-0050DA737D89}"
{
for(Stack = 0; Stack < NrStacks;)
{
Stack = Stack + 1;
// }} ""
// {{ 65 1 0 "ccd2a58e_63f4_47e7_b4622546d8d97095" "{B31F3543-5D80-11d4-A5EB-0050DA737D89}"
CurPosInStackSeqs = 0;
// }} ""
// {{ 66 1 0 "ccc94ada_534f_47ba_935bef5ad9b2c866" "{B31F3543-5D80-11d4-A5EB-0050DA737D89}"
CurStackDepth = 0;
// }} ""
/* {{ 1 "" "0" */ if(0){  /* }} "" */
// {{ 67 1 0 "b50d889d_bd85_496b_95ebdb0b20722974" "{B31F3532-5D80-11d4-A5EB-0050DA737D89}"
{
for(CurSeq = 0; CurSeq < AliquotNrPlates;)
{
CurSeq = CurSeq + 1;
// }} ""
CurPosInStackSeqs=(Stack-1)*AliquotNrPlates+(CurSeq);
// {{ 69 1 0 "db9ac346_2817_4b3e_8ec10514ce45b81c" "ML_STAR:{7EF8970F-F753-4c75-AD76-0E0D9C2CC9CD}"
{
	ML_STAR._7EF8970F_F753_4c75_AD76_0E0D9C2CC9CD("db9ac346_2817_4b3e_8ec10514ce45b81c"); // EasyCOREGripTransport
}
// }} ""
// {{ 70 1 0 "b50d889d_bd85_496b_95ebdb0b20722974" "{B31F3532-5D80-11d4-A5EB-0050DA737D89}"
}
}
// }} ""
// {{ 71 1 0 "995340cb_bb1c_4103_b62f6a59d49253e3" "{AB5187D8-1728-4c30-A7D6-E0B0D082DB80}"
PTL::ResetPipettingStateAndSequences("");
PTL::SetPipettingState("UserResponseTime", hslInfinite);
PTL::SetPipettingState("ErrorHandling", 3);
PTL::SetPipettingState("TipCountingEnabled", hslFalse);
PTL::SetPipettingState("TipCountingIdentifier", "");
PTL::SetPipettingState("CopyPatternEnabled", hslFalse);
PTL::SetPipettingState("ExcludeErrorPositionsEnabled", hslFalse);
PTL::SetPipettingState("CalibrateCarrierChannel", -1);
PTL::SetPipettingState("InitializeChannelVariable", "");
PTL::SetPipettingState("InitializeEnabled", hslTrue);
PTL::SetPipettingState("TipPickupChannelVariable", "");
PTL::SetPipettingState("TipPickupEnabled", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReloadable", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReducible", hslFalse);
PTL::SetPipettingState("TipEjectChannelVariable", "");
PTL::SetPipettingState("AspirateMode", 0);
PTL::SetPipettingState("AspirateCLLDSensitivity", 5);
PTL::SetPipettingState("AspirateFluidHeight", 0);
PTL::SetPipettingState("AspirateSubmergeDepth", 2);
PTL::SetPipettingState("AspirateChannelVariable", "");
PTL::SetPipettingState("AspirateMaxHeightDiff", 0);
PTL::SetPipettingState("AspiratePLLDSensitivity", 0);
PTL::SetPipettingState("AspirateLiquidFollowing", hslTrue);
PTL::SetPipettingState("AspirateUserDefinedLiquidClass", "StandardVolume_Water_DispenseJet_Part");
PTL::SetPipettingState("AspirateSequenceReloadable", hslFalse);
PTL::SetPipettingState("AspirateSequenceReducible", hslFalse);
PTL::SetPipettingState("AspirateSequenceCurrentInitialization", -9);
PTL::SetPipettingState("AspirateSequenceCurrentFinalization", -7);
PTL::SetPipettingState("AspirateSequenceCountInitialization", -9);
PTL::SetPipettingState("AspirateSequenceCountFinalization", -8);
PTL::SetPipettingState("AspirateSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseSubmergeDepth", 0);
PTL::SetPipettingState("DispenseChannelVariable", "");
PTL::SetPipettingState("DispenseCLLDSensitivity", 0);
PTL::SetPipettingState("DispenseFluidHeight", 5);
PTL::SetPipettingState("DispenseMode", 1);
PTL::SetPipettingState("DispenseLiquidFollowing", hslTrue);
PTL::SetPipettingState("DispenseUserDefinedLiquidClass", "StandardVolume_Water_DispenseJet_Part");
PTL::SetPipettingState("DispenseSequenceReloadable", hslFalse);
PTL::SetPipettingState("DispenseSequenceReducible", hslFalse);
PTL::SetPipettingState("DispenseSequenceCurrentInitialization", -9);
PTL::SetPipettingState("DispenseSequenceCurrentFinalization", -7);
PTL::SetPipettingState("DispenseSequenceCountInitialization", -9);
PTL::SetPipettingState("DispenseSequenceCountFinalization", -8);
PTL::SetPipettingState("DispenseSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseRestVolumeDestination", 0);
PTL::SetPipettingState("DispenseRestVolumeToAspirateSequenceSurface", hslFalse);
PTL::SetPipettingState("DispenseRestVolumeFluidHeight", 0);
PTL::SetPipettingState("AliquotEnabled", hslTrue);
PTL::SetPipettingState("AliquotPreAspirateVolume", 0);
PTL::SetPipettingState("AliquotAspirateDefaultMixingEnabled", hslTrue);
if( 0 == PTL::Pipette(ML_STAR, ML_STAR.ST_L_NE_stack_0001, ML_STAR.MasterMixX8, ML_STAR.AliquotX5, 1, 1, 16, 0, 2, hslInfinite, hslInfinite, hslInfinite, "") )
{
    PTL::RaiseRuntimeError(-1573650176, PTL::IDS::smartStepPipette, PTL::IDS::smartStepFailed, "HxGRUCompCmd");
}
// }} ""
/* {{ 1 "" "1" */ } /* }} "" */
// {{ 72 1 0 "e9b98464_2a03_42d5_b141c3f384785573" "{B31F3532-5D80-11d4-A5EB-0050DA737D89}"
{
for(CurSeq = 0; CurSeq < AliquotNrPlates;)
{
CurSeq = CurSeq + 1;
// }} ""
CurStackDepth = AliquotNrPlates-(CurSeq-1);
CurPosInStackSeqs=(Stack-1)*AliquotNrPlates+CurStackDepth;
// {{ 74 1 0 "9c5c3c13_6e27_407f_846c05d58df75d52" "ML_STAR:{7EF8970F-F753-4c75-AD76-0E0D9C2CC9CD}"
{
	ML_STAR._7EF8970F_F753_4c75_AD76_0E0D9C2CC9CD("9c5c3c13_6e27_407f_846c05d58df75d52"); // EasyCOREGripTransport
}
// }} ""
// {{ 75 1 0 "e9b98464_2a03_42d5_b141c3f384785573" "{B31F3532-5D80-11d4-A5EB-0050DA737D89}"
}
}
// }} ""
// {{ 76 1 0 "96fa5f10_8bdf_48cd_9f3555033c519519" "{B31F3532-5D80-11d4-A5EB-0050DA737D89}"
}
}
// }} ""
// {{ 77 1 0 "604db8e8_e581_4d82_aab9c67522ed11fb" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{{ 5 "BatchAliquot" "End"
}
// }} ""
// {{{ 5 "MasterMixPreparation" "Begin"
private function MasterMixPreparation( variable plates ) void {
// }} ""
private variable water_aspiration_vols;
private variable f3_b3_aspiration_vols;
private variable fip_bip_aspiration_vols;
private variable water_vol;
private variable lf_bf_aspiration_vols;
private variable reactions;
private variable neb_lamp_vol;
private variable guanidine_vol;
private variable n2_primer_mix_vol;
private dialog dialogHandleB0A4838CFA9E4823A38DDDFD04B8FF6B;
// {{ 5 "MasterMixPreparation" "InitLocals"
// }} ""
// {{ 97 1 0 "9a05f9ff_948f_49f7_93721dec423653de" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{ 98 1 0 "21b5d6a5_687c_4ae5_bdccd64ca56819f0" "{B31F3544-5D80-11d4-A5EB-0050DA737D89}"
reactions = 100 * plates;
// }} ""
// {{ 99 1 0 "54bb1a61_8100_4983_8370a299ebec4750" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
/* {{ 1 "" "0" */ if(0){  /* }} "" */
// {{ 100 1 0 "2eeba612_0f8c_4b21_a109eac54dc9db1e" "{B31F3544-5D80-11d4-A5EB-0050DA737D89}"
fip_bip_aspiration_vols = 0.4 * reactions;
// }} ""
// {{ 101 1 0 "81fe32c4_1dc0_422f_852fedc7b34c4ff3" "{B31F3544-5D80-11d4-A5EB-0050DA737D89}"
f3_b3_aspiration_vols = 0.05 * reactions;
// }} ""
// {{ 102 1 0 "55ed551b_cc8f_484b_9a8362585b52e754" "{B31F3544-5D80-11d4-A5EB-0050DA737D89}"
lf_bf_aspiration_vols = 0.2 * reactions;
// }} ""
// {{ 103 1 0 "d375340d_d451_42f1_bb3e010ca5e5e33a" "{B31F3544-5D80-11d4-A5EB-0050DA737D89}"
water_aspiration_vols = 1.2 * reactions;
// }} ""
// {{ 104 1 0 "04149747_8c97_4a6a_9883accc2168208c" "{171FFA95-85FC-41a1-B69F-679DA09E5014}"
PTL::ResetPipettingStateAndSequences("");
PTL::SetPipettingState("UserResponseTime", hslInfinite);
PTL::SetPipettingState("ErrorHandling", 3);
PTL::SetPipettingState("TipCountingEnabled", hslFalse);
PTL::SetPipettingState("TipCountingIdentifier", "");
PTL::SetPipettingState("CopyPatternEnabled", hslFalse);
PTL::SetPipettingState("ExcludeErrorPositionsEnabled", hslFalse);
PTL::SetPipettingState("CalibrateCarrierChannel", 1);
PTL::SetPipettingState("InitializeChannelVariable", "10000000");
PTL::SetPipettingState("InitializeEnabled", hslTrue);
PTL::SetPipettingState("TipPickupChannelVariable", "10000000");
PTL::SetPipettingState("TipPickupEnabled", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReloadable", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReducible", hslFalse);
PTL::SetPipettingState("TipEjectChannelVariable", "10000000");
PTL::SetPipettingState("AspirateMode", 0);
PTL::SetPipettingState("AspirateCLLDSensitivity", 5);
PTL::SetPipettingState("AspirateFluidHeight", 0);
PTL::SetPipettingState("AspirateSubmergeDepth", 2);
PTL::SetPipettingState("AspirateChannelVariable", "10000000");
PTL::SetPipettingState("AspirateMaxHeightDiff", 0);
PTL::SetPipettingState("AspiratePLLDSensitivity", 0);
PTL::SetPipettingState("AspirateLiquidFollowing", hslTrue);
PTL::SetPipettingState("AspirateUserDefinedLiquidClass", "StandardVolume_Water_DispenseJet_Empty");
PTL::SetPipettingState("AspirateSequenceReloadable", hslFalse);
PTL::SetPipettingState("AspirateSequenceReducible", hslFalse);
PTL::SetPipettingState("AspirateSequenceCurrentInitialization", -9);
PTL::SetPipettingState("AspirateSequenceCurrentFinalization", -7);
PTL::SetPipettingState("AspirateSequenceCountInitialization", -9);
PTL::SetPipettingState("AspirateSequenceCountFinalization", -8);
PTL::SetPipettingState("AspirateSequenceCalibration", hslTrue);
PTL::SetPipettingState("AspiratePrerinsingMixCycles", 2);
PTL::SetPipettingState("AspiratePrerinsingMixPosition", 1);
PTL::SetPipettingState("AspiratePrerinsingMixVolume", 20);
PTL::SetPipettingState("DispenseSubmergeDepth", 0);
PTL::SetPipettingState("DispenseChannelVariable", "10000000");
PTL::SetPipettingState("DispenseCLLDSensitivity", 0);
PTL::SetPipettingState("DispenseFluidHeight", 5);
PTL::SetPipettingState("DispenseMode", 1);
PTL::SetPipettingState("DispenseLiquidFollowing", hslTrue);
PTL::SetPipettingState("DispenseUserDefinedLiquidClass", "StandardVolume_Water_DispenseJet_Empty");
PTL::SetPipettingState("DispenseSequenceReloadable", hslFalse);
PTL::SetPipettingState("DispenseSequenceReducible", hslFalse);
PTL::SetPipettingState("DispenseSequenceCurrentInitialization", -9);
PTL::SetPipettingState("DispenseSequenceCurrentFinalization", -7);
PTL::SetPipettingState("DispenseSequenceCountInitialization", -9);
PTL::SetPipettingState("DispenseSequenceCountFinalization", -8);
PTL::SetPipettingState("DispenseSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseRestVolumeDestination", 0);
PTL::SetPipettingState("DispenseRestVolumeToAspirateSequenceSurface", hslFalse);
PTL::SetPipettingState("DispenseRestVolumeFluidHeight", 0);
if( 0 == PTL::Pipette(ML_STAR, ML_STAR.ST_L_NE_stack_0001, ML_STAR.N2_FIP_BIP, ML_STAR.N2_Primer_Mix, 2, 1, fip_bip_aspiration_vols, 0, 1, 1, 1, hslInfinite, "") )
{
    PTL::RaiseRuntimeError(-1573650176, PTL::IDS::smartStepPipette, PTL::IDS::smartStepFailed, "HxGRUCompCmd");
}
// }} ""
// {{ 105 1 0 "08a36890_6bcd_47a0_a129143366dcf97a" "{171FFA95-85FC-41a1-B69F-679DA09E5014}"
PTL::ResetPipettingStateAndSequences("");
PTL::SetPipettingState("UserResponseTime", hslInfinite);
PTL::SetPipettingState("ErrorHandling", 3);
PTL::SetPipettingState("TipCountingEnabled", hslFalse);
PTL::SetPipettingState("TipCountingIdentifier", "");
PTL::SetPipettingState("CopyPatternEnabled", hslFalse);
PTL::SetPipettingState("ExcludeErrorPositionsEnabled", hslFalse);
PTL::SetPipettingState("CalibrateCarrierChannel", 1);
PTL::SetPipettingState("InitializeChannelVariable", "10000000");
PTL::SetPipettingState("InitializeEnabled", hslTrue);
PTL::SetPipettingState("TipPickupChannelVariable", "10000000");
PTL::SetPipettingState("TipPickupEnabled", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReloadable", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReducible", hslFalse);
PTL::SetPipettingState("TipEjectChannelVariable", "10000000");
PTL::SetPipettingState("AspirateMode", 0);
PTL::SetPipettingState("AspirateCLLDSensitivity", 5);
PTL::SetPipettingState("AspirateFluidHeight", 0);
PTL::SetPipettingState("AspirateSubmergeDepth", 2);
PTL::SetPipettingState("AspirateChannelVariable", "10000000");
PTL::SetPipettingState("AspirateMaxHeightDiff", 0);
PTL::SetPipettingState("AspiratePLLDSensitivity", 0);
PTL::SetPipettingState("AspirateLiquidFollowing", hslTrue);
PTL::SetPipettingState("AspirateUserDefinedLiquidClass", "StandardVolume_Water_DispenseJet_Empty");
PTL::SetPipettingState("AspirateSequenceReloadable", hslFalse);
PTL::SetPipettingState("AspirateSequenceReducible", hslFalse);
PTL::SetPipettingState("AspirateSequenceCurrentInitialization", -9);
PTL::SetPipettingState("AspirateSequenceCurrentFinalization", -7);
PTL::SetPipettingState("AspirateSequenceCountInitialization", -9);
PTL::SetPipettingState("AspirateSequenceCountFinalization", -8);
PTL::SetPipettingState("AspirateSequenceCalibration", hslTrue);
PTL::SetPipettingState("AspiratePrerinsingMixCycles", 2);
PTL::SetPipettingState("AspiratePrerinsingMixPosition", 1);
PTL::SetPipettingState("AspiratePrerinsingMixVolume", 20);
PTL::SetPipettingState("DispenseSubmergeDepth", 0);
PTL::SetPipettingState("DispenseChannelVariable", "10000000");
PTL::SetPipettingState("DispenseCLLDSensitivity", 0);
PTL::SetPipettingState("DispenseFluidHeight", 5);
PTL::SetPipettingState("DispenseMode", 1);
PTL::SetPipettingState("DispenseLiquidFollowing", hslTrue);
PTL::SetPipettingState("DispenseUserDefinedLiquidClass", "StandardVolume_Water_DispenseJet_Empty");
PTL::SetPipettingState("DispenseSequenceReloadable", hslFalse);
PTL::SetPipettingState("DispenseSequenceReducible", hslFalse);
PTL::SetPipettingState("DispenseSequenceCurrentInitialization", -9);
PTL::SetPipettingState("DispenseSequenceCurrentFinalization", -7);
PTL::SetPipettingState("DispenseSequenceCountInitialization", -9);
PTL::SetPipettingState("DispenseSequenceCountFinalization", -8);
PTL::SetPipettingState("DispenseSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseRestVolumeDestination", 0);
PTL::SetPipettingState("DispenseRestVolumeToAspirateSequenceSurface", hslFalse);
PTL::SetPipettingState("DispenseRestVolumeFluidHeight", 0);
if( 0 == PTL::Pipette(ML_STAR, ML_STAR.ST_L_NE_stack_0001, ML_STAR.N2_F3_B3, ML_STAR.N2_Primer_Mix, 2, 1, f3_b3_aspiration_vols, 0, 1, 1, 1, hslInfinite, "") )
{
    PTL::RaiseRuntimeError(-1573650176, PTL::IDS::smartStepPipette, PTL::IDS::smartStepFailed, "HxGRUCompCmd");
}
// }} ""
// {{ 106 1 0 "3d503aa2_5674_4bda_a0532469afd368b1" "{171FFA95-85FC-41a1-B69F-679DA09E5014}"
PTL::ResetPipettingStateAndSequences("");
PTL::SetPipettingState("UserResponseTime", hslInfinite);
PTL::SetPipettingState("ErrorHandling", 3);
PTL::SetPipettingState("TipCountingEnabled", hslFalse);
PTL::SetPipettingState("TipCountingIdentifier", "");
PTL::SetPipettingState("CopyPatternEnabled", hslFalse);
PTL::SetPipettingState("ExcludeErrorPositionsEnabled", hslFalse);
PTL::SetPipettingState("CalibrateCarrierChannel", 1);
PTL::SetPipettingState("InitializeChannelVariable", "10000000");
PTL::SetPipettingState("InitializeEnabled", hslTrue);
PTL::SetPipettingState("TipPickupChannelVariable", "10000000");
PTL::SetPipettingState("TipPickupEnabled", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReloadable", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReducible", hslFalse);
PTL::SetPipettingState("TipEjectChannelVariable", "10000000");
PTL::SetPipettingState("AspirateMode", 0);
PTL::SetPipettingState("AspirateCLLDSensitivity", 5);
PTL::SetPipettingState("AspirateFluidHeight", 0);
PTL::SetPipettingState("AspirateSubmergeDepth", 2);
PTL::SetPipettingState("AspirateChannelVariable", "10000000");
PTL::SetPipettingState("AspirateMaxHeightDiff", 0);
PTL::SetPipettingState("AspiratePLLDSensitivity", 0);
PTL::SetPipettingState("AspirateLiquidFollowing", hslTrue);
PTL::SetPipettingState("AspirateUserDefinedLiquidClass", "StandardVolume_Water_DispenseJet_Empty");
PTL::SetPipettingState("AspirateSequenceReloadable", hslFalse);
PTL::SetPipettingState("AspirateSequenceReducible", hslFalse);
PTL::SetPipettingState("AspirateSequenceCurrentInitialization", -9);
PTL::SetPipettingState("AspirateSequenceCurrentFinalization", -7);
PTL::SetPipettingState("AspirateSequenceCountInitialization", -9);
PTL::SetPipettingState("AspirateSequenceCountFinalization", -8);
PTL::SetPipettingState("AspirateSequenceCalibration", hslTrue);
PTL::SetPipettingState("AspiratePrerinsingMixCycles", 2);
PTL::SetPipettingState("AspiratePrerinsingMixPosition", 1);
PTL::SetPipettingState("AspiratePrerinsingMixVolume", 20);
PTL::SetPipettingState("DispenseSubmergeDepth", 0);
PTL::SetPipettingState("DispenseChannelVariable", "10000000");
PTL::SetPipettingState("DispenseCLLDSensitivity", 0);
PTL::SetPipettingState("DispenseFluidHeight", 5);
PTL::SetPipettingState("DispenseMode", 1);
PTL::SetPipettingState("DispenseLiquidFollowing", hslTrue);
PTL::SetPipettingState("DispenseUserDefinedLiquidClass", "StandardVolume_Water_DispenseJet_Empty");
PTL::SetPipettingState("DispenseSequenceReloadable", hslFalse);
PTL::SetPipettingState("DispenseSequenceReducible", hslFalse);
PTL::SetPipettingState("DispenseSequenceCurrentInitialization", -9);
PTL::SetPipettingState("DispenseSequenceCurrentFinalization", -7);
PTL::SetPipettingState("DispenseSequenceCountInitialization", -9);
PTL::SetPipettingState("DispenseSequenceCountFinalization", -8);
PTL::SetPipettingState("DispenseSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseRestVolumeDestination", 0);
PTL::SetPipettingState("DispenseRestVolumeToAspirateSequenceSurface", hslFalse);
PTL::SetPipettingState("DispenseRestVolumeFluidHeight", 0);
if( 0 == PTL::Pipette(ML_STAR, ML_STAR.ST_L_NE_stack_0001, ML_STAR.N2_LF_LB, ML_STAR.N2_Primer_Mix, 2, 1, lf_bf_aspiration_vols, 0, 1, 1, 1, hslInfinite, "") )
{
    PTL::RaiseRuntimeError(-1573650176, PTL::IDS::smartStepPipette, PTL::IDS::smartStepFailed, "HxGRUCompCmd");
}
// }} ""
// {{ 107 1 0 "a9977a1c_0ab5_458a_9464f597307935e7" "{171FFA95-85FC-41a1-B69F-679DA09E5014}"
PTL::ResetPipettingStateAndSequences("");
PTL::SetPipettingState("UserResponseTime", hslInfinite);
PTL::SetPipettingState("ErrorHandling", 3);
PTL::SetPipettingState("TipCountingEnabled", hslFalse);
PTL::SetPipettingState("TipCountingIdentifier", "");
PTL::SetPipettingState("CopyPatternEnabled", hslFalse);
PTL::SetPipettingState("ExcludeErrorPositionsEnabled", hslFalse);
PTL::SetPipettingState("CalibrateCarrierChannel", 1);
PTL::SetPipettingState("InitializeChannelVariable", "10000000");
PTL::SetPipettingState("InitializeEnabled", hslTrue);
PTL::SetPipettingState("TipPickupChannelVariable", "10000000");
PTL::SetPipettingState("TipPickupEnabled", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReloadable", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReducible", hslFalse);
PTL::SetPipettingState("TipEjectChannelVariable", "10000000");
PTL::SetPipettingState("AspirateMode", 0);
PTL::SetPipettingState("AspirateCLLDSensitivity", 5);
PTL::SetPipettingState("AspirateFluidHeight", 0);
PTL::SetPipettingState("AspirateSubmergeDepth", 2);
PTL::SetPipettingState("AspirateChannelVariable", "10000000");
PTL::SetPipettingState("AspirateMaxHeightDiff", 0);
PTL::SetPipettingState("AspiratePLLDSensitivity", 0);
PTL::SetPipettingState("AspirateLiquidFollowing", hslTrue);
PTL::SetPipettingState("AspirateUserDefinedLiquidClass", "StandardVolume_Water_DispenseJet_Empty");
PTL::SetPipettingState("AspirateSequenceReloadable", hslFalse);
PTL::SetPipettingState("AspirateSequenceReducible", hslFalse);
PTL::SetPipettingState("AspirateSequenceCurrentInitialization", -9);
PTL::SetPipettingState("AspirateSequenceCurrentFinalization", -7);
PTL::SetPipettingState("AspirateSequenceCountInitialization", -9);
PTL::SetPipettingState("AspirateSequenceCountFinalization", -8);
PTL::SetPipettingState("AspirateSequenceCalibration", hslTrue);
PTL::SetPipettingState("AspiratePrerinsingMixCycles", 2);
PTL::SetPipettingState("AspiratePrerinsingMixPosition", 1);
PTL::SetPipettingState("AspiratePrerinsingMixVolume", 20);
PTL::SetPipettingState("DispenseSubmergeDepth", 0);
PTL::SetPipettingState("DispenseChannelVariable", "10000000");
PTL::SetPipettingState("DispenseCLLDSensitivity", 0);
PTL::SetPipettingState("DispenseFluidHeight", 5);
PTL::SetPipettingState("DispenseMode", 1);
PTL::SetPipettingState("DispenseLiquidFollowing", hslTrue);
PTL::SetPipettingState("DispenseUserDefinedLiquidClass", "StandardVolume_Water_DispenseJet_Empty");
PTL::SetPipettingState("DispenseSequenceReloadable", hslFalse);
PTL::SetPipettingState("DispenseSequenceReducible", hslFalse);
PTL::SetPipettingState("DispenseSequenceCurrentInitialization", -9);
PTL::SetPipettingState("DispenseSequenceCurrentFinalization", -7);
PTL::SetPipettingState("DispenseSequenceCountInitialization", -9);
PTL::SetPipettingState("DispenseSequenceCountFinalization", -8);
PTL::SetPipettingState("DispenseSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseRestVolumeDestination", 0);
PTL::SetPipettingState("DispenseRestVolumeToAspirateSequenceSurface", hslFalse);
PTL::SetPipettingState("DispenseRestVolumeFluidHeight", 0);
if( 0 == PTL::Pipette(ML_STAR, ML_STAR.ST_L_NE_stack_0001, ML_STAR.water, ML_STAR.N2_Primer_Mix, 2, 1, water_aspiration_vols, 0, 1, 1, 1, hslInfinite, "") )
{
    PTL::RaiseRuntimeError(-1573650176, PTL::IDS::smartStepPipette, PTL::IDS::smartStepFailed, "HxGRUCompCmd");
}
// }} ""
/* {{ 1 "" "1" */ } /* }} "" */
// {{ 108 1 0 "6319e67f_2f51_483f_80750439a5428e22" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{ 109 1 0 "efc71e3a_2f4d_404a_a6993a72647b6aeb" "{B31F3544-5D80-11d4-A5EB-0050DA737D89}"
neb_lamp_vol = 12.5 * reactions;
// }} ""
// {{ 110 1 0 "9bdcacf8_ede9_4a61_b0d0fff70815ccbc" "{B31F3544-5D80-11d4-A5EB-0050DA737D89}"
n2_primer_mix_vol = 2.5 * reactions;
// }} ""
// {{ 111 1 0 "5cb7706e_5388_4e49_9f492bf6dda9369a" "{B31F3544-5D80-11d4-A5EB-0050DA737D89}"
guanidine_vol = 2.5 * reactions;
// }} ""
// {{ 112 1 0 "96b236fe_f553_43ac_b4ef23003ae879cc" "{B31F3544-5D80-11d4-A5EB-0050DA737D89}"
water_vol = 2.5 * reactions;
// }} ""
// {{ 113 1 0 "f1f4ad3b_010c_41c3_8684fad0925cd84f" "{21E07B31-8D2E-11d4-A3B8-002035848439}"
dialogHandleB0A4838CFA9E4823A38DDDFD04B8FF6B.SetOutput(Translate("neb_lamp_vol: "), neb_lamp_vol, "\n", Translate("n2_primer_mix_vol: "), n2_primer_mix_vol, "\n", Translate("guanidine_vol: "), guanidine_vol, "\n", Translate("water_vol: "), water_vol, "\n");
dialogHandleB0A4838CFA9E4823A38DDDFD04B8FF6B.ShowOutput(Translate("Reagents needed"), hslOKOnly | hslInformation | hslDefButton1, hslInfinite);
// }} ""
// {{ 114 1 0 "95addb24_e545_4f04_b5134556c0ef1fd1" "{171FFA95-85FC-41a1-B69F-679DA09E5014}"
PTL::ResetPipettingStateAndSequences("");
PTL::SetPipettingState("UserResponseTime", hslInfinite);
PTL::SetPipettingState("ErrorHandling", 3);
PTL::SetPipettingState("TipCountingEnabled", hslFalse);
PTL::SetPipettingState("TipCountingIdentifier", "");
PTL::SetPipettingState("CopyPatternEnabled", hslFalse);
PTL::SetPipettingState("ExcludeErrorPositionsEnabled", hslFalse);
PTL::SetPipettingState("CalibrateCarrierChannel", 1);
PTL::SetPipettingState("InitializeChannelVariable", "10000000");
PTL::SetPipettingState("InitializeEnabled", hslTrue);
PTL::SetPipettingState("TipPickupChannelVariable", "10000000");
PTL::SetPipettingState("TipPickupEnabled", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReloadable", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReducible", hslFalse);
PTL::SetPipettingState("TipEjectChannelVariable", "10000000");
PTL::SetPipettingState("AspirateMode", 0);
PTL::SetPipettingState("AspirateCLLDSensitivity", 5);
PTL::SetPipettingState("AspirateFluidHeight", 0);
PTL::SetPipettingState("AspirateSubmergeDepth", 2);
PTL::SetPipettingState("AspirateChannelVariable", "10000000");
PTL::SetPipettingState("AspirateMaxHeightDiff", 0);
PTL::SetPipettingState("AspiratePLLDSensitivity", 0);
PTL::SetPipettingState("AspirateLiquidFollowing", hslTrue);
PTL::SetPipettingState("AspirateUserDefinedLiquidClass", "StandardVolume_Water_DispenseJet_Empty");
PTL::SetPipettingState("AspirateSequenceReloadable", hslFalse);
PTL::SetPipettingState("AspirateSequenceReducible", hslFalse);
PTL::SetPipettingState("AspirateSequenceCurrentInitialization", -9);
PTL::SetPipettingState("AspirateSequenceCurrentFinalization", -7);
PTL::SetPipettingState("AspirateSequenceCountInitialization", -9);
PTL::SetPipettingState("AspirateSequenceCountFinalization", -8);
PTL::SetPipettingState("AspirateSequenceCalibration", hslTrue);
PTL::SetPipettingState("AspiratePrerinsingMixCycles", 2);
PTL::SetPipettingState("AspiratePrerinsingMixPosition", 1);
PTL::SetPipettingState("AspiratePrerinsingMixVolume", 20);
PTL::SetPipettingState("DispenseSubmergeDepth", 0);
PTL::SetPipettingState("DispenseChannelVariable", "10000000");
PTL::SetPipettingState("DispenseCLLDSensitivity", 0);
PTL::SetPipettingState("DispenseFluidHeight", 5);
PTL::SetPipettingState("DispenseMode", 1);
PTL::SetPipettingState("DispenseLiquidFollowing", hslTrue);
PTL::SetPipettingState("DispenseUserDefinedLiquidClass", "StandardVolume_Water_DispenseJet_Empty");
PTL::SetPipettingState("DispenseSequenceReloadable", hslFalse);
PTL::SetPipettingState("DispenseSequenceReducible", hslFalse);
PTL::SetPipettingState("DispenseSequenceCurrentInitialization", -9);
PTL::SetPipettingState("DispenseSequenceCurrentFinalization", -7);
PTL::SetPipettingState("DispenseSequenceCountInitialization", -9);
PTL::SetPipettingState("DispenseSequenceCountFinalization", -8);
PTL::SetPipettingState("DispenseSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseRestVolumeDestination", 0);
PTL::SetPipettingState("DispenseRestVolumeToAspirateSequenceSurface", hslFalse);
PTL::SetPipettingState("DispenseRestVolumeFluidHeight", 0);
if( 0 == PTL::Pipette(ML_STAR, ML_STAR.ST_L_NE_stack_0001, ML_STAR.NEB_LAMP_Mix, ML_STAR.MasterMix, 1, 1, neb_lamp_vol, 0, 1, 1, 1, hslInfinite, "") )
{
    PTL::RaiseRuntimeError(-1573650176, PTL::IDS::smartStepPipette, PTL::IDS::smartStepFailed, "HxGRUCompCmd");
}
// }} ""
// {{ 115 1 0 "42c9e6ae_a34a_48b1_b596ce75b500cf87" "{171FFA95-85FC-41a1-B69F-679DA09E5014}"
PTL::ResetPipettingStateAndSequences("");
PTL::SetPipettingState("UserResponseTime", hslInfinite);
PTL::SetPipettingState("ErrorHandling", 3);
PTL::SetPipettingState("TipCountingEnabled", hslFalse);
PTL::SetPipettingState("TipCountingIdentifier", "");
PTL::SetPipettingState("CopyPatternEnabled", hslFalse);
PTL::SetPipettingState("ExcludeErrorPositionsEnabled", hslFalse);
PTL::SetPipettingState("CalibrateCarrierChannel", 1);
PTL::SetPipettingState("InitializeChannelVariable", "10000000");
PTL::SetPipettingState("InitializeEnabled", hslTrue);
PTL::SetPipettingState("TipPickupChannelVariable", "10000000");
PTL::SetPipettingState("TipPickupEnabled", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReloadable", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReducible", hslFalse);
PTL::SetPipettingState("TipEjectChannelVariable", "10000000");
PTL::SetPipettingState("AspirateMode", 0);
PTL::SetPipettingState("AspirateCLLDSensitivity", 5);
PTL::SetPipettingState("AspirateFluidHeight", 0);
PTL::SetPipettingState("AspirateSubmergeDepth", 2);
PTL::SetPipettingState("AspirateChannelVariable", "10000000");
PTL::SetPipettingState("AspirateMaxHeightDiff", 0);
PTL::SetPipettingState("AspiratePLLDSensitivity", 0);
PTL::SetPipettingState("AspirateLiquidFollowing", hslTrue);
PTL::SetPipettingState("AspirateUserDefinedLiquidClass", "StandardVolume_Water_DispenseJet_Empty");
PTL::SetPipettingState("AspirateSequenceReloadable", hslFalse);
PTL::SetPipettingState("AspirateSequenceReducible", hslFalse);
PTL::SetPipettingState("AspirateSequenceCurrentInitialization", -9);
PTL::SetPipettingState("AspirateSequenceCurrentFinalization", -7);
PTL::SetPipettingState("AspirateSequenceCountInitialization", -9);
PTL::SetPipettingState("AspirateSequenceCountFinalization", -8);
PTL::SetPipettingState("AspirateSequenceCalibration", hslTrue);
PTL::SetPipettingState("AspiratePrerinsingMixCycles", 2);
PTL::SetPipettingState("AspiratePrerinsingMixPosition", 1);
PTL::SetPipettingState("AspiratePrerinsingMixVolume", 20);
PTL::SetPipettingState("DispenseSubmergeDepth", 0);
PTL::SetPipettingState("DispenseChannelVariable", "10000000");
PTL::SetPipettingState("DispenseCLLDSensitivity", 0);
PTL::SetPipettingState("DispenseFluidHeight", 5);
PTL::SetPipettingState("DispenseMode", 1);
PTL::SetPipettingState("DispenseLiquidFollowing", hslTrue);
PTL::SetPipettingState("DispenseUserDefinedLiquidClass", "StandardVolume_Water_DispenseJet_Empty");
PTL::SetPipettingState("DispenseSequenceReloadable", hslFalse);
PTL::SetPipettingState("DispenseSequenceReducible", hslFalse);
PTL::SetPipettingState("DispenseSequenceCurrentInitialization", -9);
PTL::SetPipettingState("DispenseSequenceCurrentFinalization", -7);
PTL::SetPipettingState("DispenseSequenceCountInitialization", -9);
PTL::SetPipettingState("DispenseSequenceCountFinalization", -8);
PTL::SetPipettingState("DispenseSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseRestVolumeDestination", 0);
PTL::SetPipettingState("DispenseRestVolumeToAspirateSequenceSurface", hslFalse);
PTL::SetPipettingState("DispenseRestVolumeFluidHeight", 0);
if( 0 == PTL::Pipette(ML_STAR, ML_STAR.ST_L_NE_stack_0001, ML_STAR.N2_Primer_Mix, ML_STAR.MasterMix, 1, 1, n2_primer_mix_vol, 0, 1, 1, 1, hslInfinite, "") )
{
    PTL::RaiseRuntimeError(-1573650176, PTL::IDS::smartStepPipette, PTL::IDS::smartStepFailed, "HxGRUCompCmd");
}
// }} ""
// {{ 116 1 0 "17b6531a_6242_46d0_a81de59c5ccdc98a" "{171FFA95-85FC-41a1-B69F-679DA09E5014}"
PTL::ResetPipettingStateAndSequences("");
PTL::SetPipettingState("UserResponseTime", hslInfinite);
PTL::SetPipettingState("ErrorHandling", 3);
PTL::SetPipettingState("TipCountingEnabled", hslFalse);
PTL::SetPipettingState("TipCountingIdentifier", "");
PTL::SetPipettingState("CopyPatternEnabled", hslFalse);
PTL::SetPipettingState("ExcludeErrorPositionsEnabled", hslFalse);
PTL::SetPipettingState("CalibrateCarrierChannel", 1);
PTL::SetPipettingState("InitializeChannelVariable", "10000000");
PTL::SetPipettingState("InitializeEnabled", hslTrue);
PTL::SetPipettingState("TipPickupChannelVariable", "10000000");
PTL::SetPipettingState("TipPickupEnabled", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReloadable", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReducible", hslFalse);
PTL::SetPipettingState("TipEjectChannelVariable", "10000000");
PTL::SetPipettingState("AspirateMode", 0);
PTL::SetPipettingState("AspirateCLLDSensitivity", 5);
PTL::SetPipettingState("AspirateFluidHeight", 0);
PTL::SetPipettingState("AspirateSubmergeDepth", 2);
PTL::SetPipettingState("AspirateChannelVariable", "10000000");
PTL::SetPipettingState("AspirateMaxHeightDiff", 0);
PTL::SetPipettingState("AspiratePLLDSensitivity", 0);
PTL::SetPipettingState("AspirateLiquidFollowing", hslTrue);
PTL::SetPipettingState("AspirateUserDefinedLiquidClass", "StandardVolume_Water_DispenseJet_Empty");
PTL::SetPipettingState("AspirateSequenceReloadable", hslFalse);
PTL::SetPipettingState("AspirateSequenceReducible", hslFalse);
PTL::SetPipettingState("AspirateSequenceCurrentInitialization", -9);
PTL::SetPipettingState("AspirateSequenceCurrentFinalization", -7);
PTL::SetPipettingState("AspirateSequenceCountInitialization", -9);
PTL::SetPipettingState("AspirateSequenceCountFinalization", -8);
PTL::SetPipettingState("AspirateSequenceCalibration", hslTrue);
PTL::SetPipettingState("AspiratePrerinsingMixCycles", 2);
PTL::SetPipettingState("AspiratePrerinsingMixPosition", 1);
PTL::SetPipettingState("AspiratePrerinsingMixVolume", 20);
PTL::SetPipettingState("DispenseSubmergeDepth", 0);
PTL::SetPipettingState("DispenseChannelVariable", "10000000");
PTL::SetPipettingState("DispenseCLLDSensitivity", 0);
PTL::SetPipettingState("DispenseFluidHeight", 5);
PTL::SetPipettingState("DispenseMode", 1);
PTL::SetPipettingState("DispenseLiquidFollowing", hslTrue);
PTL::SetPipettingState("DispenseUserDefinedLiquidClass", "StandardVolume_Water_DispenseJet_Empty");
PTL::SetPipettingState("DispenseSequenceReloadable", hslFalse);
PTL::SetPipettingState("DispenseSequenceReducible", hslFalse);
PTL::SetPipettingState("DispenseSequenceCurrentInitialization", -9);
PTL::SetPipettingState("DispenseSequenceCurrentFinalization", -7);
PTL::SetPipettingState("DispenseSequenceCountInitialization", -9);
PTL::SetPipettingState("DispenseSequenceCountFinalization", -8);
PTL::SetPipettingState("DispenseSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseRestVolumeDestination", 0);
PTL::SetPipettingState("DispenseRestVolumeToAspirateSequenceSurface", hslFalse);
PTL::SetPipettingState("DispenseRestVolumeFluidHeight", 0);
if( 0 == PTL::Pipette(ML_STAR, ML_STAR.ST_L_NE_stack_0001, ML_STAR.Guanidine, ML_STAR.MasterMix, 1, 1, guanidine_vol, 0, 1, 1, 1, hslInfinite, "") )
{
    PTL::RaiseRuntimeError(-1573650176, PTL::IDS::smartStepPipette, PTL::IDS::smartStepFailed, "HxGRUCompCmd");
}
// }} ""
// {{ 117 1 0 "c6796e0a_7f74_4b99_ba33216692144c6a" "{171FFA95-85FC-41a1-B69F-679DA09E5014}"
PTL::ResetPipettingStateAndSequences("");
PTL::SetPipettingState("UserResponseTime", hslInfinite);
PTL::SetPipettingState("ErrorHandling", 3);
PTL::SetPipettingState("TipCountingEnabled", hslFalse);
PTL::SetPipettingState("TipCountingIdentifier", "");
PTL::SetPipettingState("CopyPatternEnabled", hslFalse);
PTL::SetPipettingState("ExcludeErrorPositionsEnabled", hslFalse);
PTL::SetPipettingState("CalibrateCarrierChannel", 1);
PTL::SetPipettingState("InitializeChannelVariable", "10000000");
PTL::SetPipettingState("InitializeEnabled", hslTrue);
PTL::SetPipettingState("TipPickupChannelVariable", "10000000");
PTL::SetPipettingState("TipPickupEnabled", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReloadable", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReducible", hslFalse);
PTL::SetPipettingState("TipEjectChannelVariable", "10000000");
PTL::SetPipettingState("AspirateMode", 0);
PTL::SetPipettingState("AspirateCLLDSensitivity", 5);
PTL::SetPipettingState("AspirateFluidHeight", 0);
PTL::SetPipettingState("AspirateSubmergeDepth", 2);
PTL::SetPipettingState("AspirateChannelVariable", "10000000");
PTL::SetPipettingState("AspirateMaxHeightDiff", 0);
PTL::SetPipettingState("AspiratePLLDSensitivity", 0);
PTL::SetPipettingState("AspirateLiquidFollowing", hslTrue);
PTL::SetPipettingState("AspirateUserDefinedLiquidClass", "StandardVolume_Water_DispenseJet_Empty");
PTL::SetPipettingState("AspirateSequenceReloadable", hslFalse);
PTL::SetPipettingState("AspirateSequenceReducible", hslFalse);
PTL::SetPipettingState("AspirateSequenceCurrentInitialization", -9);
PTL::SetPipettingState("AspirateSequenceCurrentFinalization", -7);
PTL::SetPipettingState("AspirateSequenceCountInitialization", -9);
PTL::SetPipettingState("AspirateSequenceCountFinalization", -8);
PTL::SetPipettingState("AspirateSequenceCalibration", hslTrue);
PTL::SetPipettingState("AspiratePrerinsingMixCycles", 2);
PTL::SetPipettingState("AspiratePrerinsingMixPosition", 1);
PTL::SetPipettingState("AspiratePrerinsingMixVolume", 20);
PTL::SetPipettingState("DispenseSubmergeDepth", 0);
PTL::SetPipettingState("DispenseChannelVariable", "10000000");
PTL::SetPipettingState("DispenseCLLDSensitivity", 0);
PTL::SetPipettingState("DispenseFluidHeight", 5);
PTL::SetPipettingState("DispenseMode", 1);
PTL::SetPipettingState("DispenseLiquidFollowing", hslTrue);
PTL::SetPipettingState("DispenseUserDefinedLiquidClass", "StandardVolume_Water_DispenseJet_Empty");
PTL::SetPipettingState("DispenseSequenceReloadable", hslFalse);
PTL::SetPipettingState("DispenseSequenceReducible", hslFalse);
PTL::SetPipettingState("DispenseSequenceCurrentInitialization", -9);
PTL::SetPipettingState("DispenseSequenceCurrentFinalization", -7);
PTL::SetPipettingState("DispenseSequenceCountInitialization", -9);
PTL::SetPipettingState("DispenseSequenceCountFinalization", -8);
PTL::SetPipettingState("DispenseSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseRestVolumeDestination", 0);
PTL::SetPipettingState("DispenseRestVolumeToAspirateSequenceSurface", hslFalse);
PTL::SetPipettingState("DispenseRestVolumeFluidHeight", 0);
if( 0 == PTL::Pipette(ML_STAR, ML_STAR.ST_L_NE_stack_0001, ML_STAR.water, ML_STAR.MasterMix, 1, 1, water_vol, 0, 1, 1, 1, hslInfinite, "") )
{
    PTL::RaiseRuntimeError(-1573650176, PTL::IDS::smartStepPipette, PTL::IDS::smartStepFailed, "HxGRUCompCmd");
}
// }} ""
// {{ 118 1 0 "931ed0b9_34e7_4a23_ad0361e12560266b" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{{ 5 "MasterMixPreparation" "End"
}
// }} ""
// {{{ 5 "QCAliquotMini" "Begin"
private function QCAliquotMini(  ) void {
// }} ""
// {{ 5 "QCAliquotMini" "InitLocals"
// }} ""
// {{ 125 1 0 "3f2d51f5_e019_4825_9bddac9b3885bcf1" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{ 126 1 0 "bde50443_ba53_4b92_b4743045ac87cf91" "{B31F353C-5D80-11d4-A5EB-0050DA737D89}"
ML_STAR.QC_Plate_Col_1.SetCount(2);
// }} ""
// {{ 127 1 0 "967c24d6_7c73_44c6_aed6075716ebacbe" "{B558D25C-EB8A-4a43-8878-125E1847965C}"
PTL::ResetPipettingStateAndSequences("");
PTL::SetPipettingState("UserResponseTime", hslInfinite);
PTL::SetPipettingState("ErrorHandling", 3);
PTL::SetPipettingState("TipCountingEnabled", hslFalse);
PTL::SetPipettingState("TipCountingIdentifier", "");
PTL::SetPipettingState("CopyPatternEnabled", hslFalse);
PTL::SetPipettingState("ExcludeErrorPositionsEnabled", hslFalse);
PTL::SetPipettingState("CalibrateCarrierChannel", -1);
PTL::SetPipettingState("InitializeChannelVariable", "");
PTL::SetPipettingState("InitializeEnabled", hslTrue);
PTL::SetPipettingState("TipPickupChannelVariable", "");
PTL::SetPipettingState("TipPickupEnabled", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReloadable", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReducible", hslTrue);
PTL::SetPipettingState("TipEjectChannelVariable", "");
PTL::SetPipettingState("AspirateMode", 0);
PTL::SetPipettingState("AspirateCLLDSensitivity", 5);
PTL::SetPipettingState("AspirateFluidHeight", 0);
PTL::SetPipettingState("AspirateSubmergeDepth", 2);
PTL::SetPipettingState("AspirateChannelVariable", "");
PTL::SetPipettingState("AspirateMaxHeightDiff", 0);
PTL::SetPipettingState("AspiratePLLDSensitivity", 0);
PTL::SetPipettingState("AspirateLiquidFollowing", hslTrue);
PTL::SetPipettingState("AspirateUserDefinedLiquidClass", "StandardVolume_Water_DispenseJet_Empty");
PTL::SetPipettingState("AspirateSequenceReloadable", hslFalse);
PTL::SetPipettingState("AspirateSequenceReducible", hslFalse);
PTL::SetPipettingState("AspirateSequenceCurrentInitialization", -10);
PTL::SetPipettingState("AspirateSequenceCurrentFinalization", -7);
PTL::SetPipettingState("AspirateSequenceCountInitialization", -9);
PTL::SetPipettingState("AspirateSequenceCountFinalization", -8);
PTL::SetPipettingState("AspirateSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseSubmergeDepth", 0);
PTL::SetPipettingState("DispenseChannelVariable", "");
PTL::SetPipettingState("DispenseCLLDSensitivity", 0);
PTL::SetPipettingState("DispenseFluidHeight", 5);
PTL::SetPipettingState("DispenseMode", 1);
PTL::SetPipettingState("DispenseLiquidFollowing", hslTrue);
PTL::SetPipettingState("DispenseUserDefinedLiquidClass", "StandardVolume_Water_DispenseJet_Empty");
PTL::SetPipettingState("DispenseSequenceReloadable", hslFalse);
PTL::SetPipettingState("DispenseSequenceReducible", hslFalse);
PTL::SetPipettingState("DispenseSequenceCurrentInitialization", -10);
PTL::SetPipettingState("DispenseSequenceCurrentFinalization", -7);
PTL::SetPipettingState("DispenseSequenceCountInitialization", -10);
PTL::SetPipettingState("DispenseSequenceCountFinalization", -8);
PTL::SetPipettingState("DispenseSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseRestVolumeDestination", 0);
PTL::SetPipettingState("DispenseRestVolumeToAspirateSequenceSurface", hslFalse);
PTL::SetPipettingState("DispenseRestVolumeFluidHeight", 0);
if( 0 == PTL::Pipette(ML_STAR, ML_STAR.ST_L_NE_stack_0001, ML_STAR.MasterMixX8, ML_STAR.QC_Plate_Col_1, 1, 1, 20, 0, 2, hslInfinite, hslInfinite, 1, "") )
{
    PTL::RaiseRuntimeError(-1573650176, PTL::IDS::smartStepPipette, PTL::IDS::smartStepFailed, "HxGRUCompCmd");
}
// }} ""
// {{ 128 1 0 "2bb38483_5c03_4c42_8cf3b895f4c33423" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
// {{ 129 1 0 "0d7298e2_e7d3_4af3_8add965429f0f06e" "{B31F353A-5D80-11d4-A5EB-0050DA737D89}"
ML_STAR.QC_Plate_Col_1.SetCurrentPosition(1);
// }} ""
// {{ 130 1 0 "3a09a4a2_a7bb_426b_9834addd4b21073e" "{B558D25C-EB8A-4a43-8878-125E1847965C}"
PTL::ResetPipettingStateAndSequences("");
PTL::SetPipettingState("UserResponseTime", hslInfinite);
PTL::SetPipettingState("ErrorHandling", 3);
PTL::SetPipettingState("TipCountingEnabled", hslFalse);
PTL::SetPipettingState("TipCountingIdentifier", "");
PTL::SetPipettingState("CopyPatternEnabled", hslFalse);
PTL::SetPipettingState("ExcludeErrorPositionsEnabled", hslFalse);
PTL::SetPipettingState("CalibrateCarrierChannel", -1);
PTL::SetPipettingState("InitializeChannelVariable", "");
PTL::SetPipettingState("InitializeEnabled", hslTrue);
PTL::SetPipettingState("TipPickupChannelVariable", "");
PTL::SetPipettingState("TipPickupEnabled", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReloadable", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReducible", hslTrue);
PTL::SetPipettingState("TipEjectChannelVariable", "");
PTL::SetPipettingState("AspirateMode", 0);
PTL::SetPipettingState("AspirateCLLDSensitivity", 5);
PTL::SetPipettingState("AspirateFluidHeight", 0);
PTL::SetPipettingState("AspirateSubmergeDepth", 2);
PTL::SetPipettingState("AspirateChannelVariable", "");
PTL::SetPipettingState("AspirateMaxHeightDiff", 0);
PTL::SetPipettingState("AspiratePLLDSensitivity", 0);
PTL::SetPipettingState("AspirateLiquidFollowing", hslTrue);
PTL::SetPipettingState("AspirateUserDefinedLiquidClass", "StandardVolume_Water_DispenseJet_Empty");
PTL::SetPipettingState("AspirateSequenceReloadable", hslFalse);
PTL::SetPipettingState("AspirateSequenceReducible", hslFalse);
PTL::SetPipettingState("AspirateSequenceCurrentInitialization", -10);
PTL::SetPipettingState("AspirateSequenceCurrentFinalization", -7);
PTL::SetPipettingState("AspirateSequenceCountInitialization", -10);
PTL::SetPipettingState("AspirateSequenceCountFinalization", -8);
PTL::SetPipettingState("AspirateSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseSubmergeDepth", 0);
PTL::SetPipettingState("DispenseChannelVariable", "");
PTL::SetPipettingState("DispenseCLLDSensitivity", 0);
PTL::SetPipettingState("DispenseFluidHeight", 5);
PTL::SetPipettingState("DispenseMode", 1);
PTL::SetPipettingState("DispenseLiquidFollowing", hslTrue);
PTL::SetPipettingState("DispenseUserDefinedLiquidClass", "StandardVolume_Water_DispenseJet_Empty");
PTL::SetPipettingState("DispenseSequenceReloadable", hslFalse);
PTL::SetPipettingState("DispenseSequenceReducible", hslFalse);
PTL::SetPipettingState("DispenseSequenceCurrentInitialization", -9);
PTL::SetPipettingState("DispenseSequenceCurrentFinalization", -7);
PTL::SetPipettingState("DispenseSequenceCountInitialization", -9);
PTL::SetPipettingState("DispenseSequenceCountFinalization", -8);
PTL::SetPipettingState("DispenseSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseRestVolumeDestination", 0);
PTL::SetPipettingState("DispenseRestVolumeToAspirateSequenceSurface", hslFalse);
PTL::SetPipettingState("DispenseRestVolumeFluidHeight", 0);
if( 0 == PTL::Pipette(ML_STAR, ML_STAR.ST_L_NE_stack_0001, ML_STAR.QC_Plate_Col_1, ML_STAR.QC_Plate_Col_5, 1, 1, 2, 0, 1, hslInfinite, hslInfinite, 1, "") )
{
    PTL::RaiseRuntimeError(-1573650176, PTL::IDS::smartStepPipette, PTL::IDS::smartStepFailed, "HxGRUCompCmd");
}
// }} ""
/* {{ 1 "" "0" */ if(0){  /* }} "" */
// {{ 131 1 0 "3966043e_5544_4444_b8142772afbf9489" "{F07B0071-8EFC-11d4-A3BA-002035848439}"

// }} ""
/* {{ 1 "" "1" */ } /* }} "" */
// {{ 132 1 0 "a058c98f_28cb_45b1_b362b130d5f090f0" "{B558D25C-EB8A-4a43-8878-125E1847965C}"
PTL::ResetPipettingStateAndSequences("");
PTL::SetPipettingState("UserResponseTime", hslInfinite);
PTL::SetPipettingState("ErrorHandling", 3);
PTL::SetPipettingState("TipCountingEnabled", hslFalse);
PTL::SetPipettingState("TipCountingIdentifier", "");
PTL::SetPipettingState("CopyPatternEnabled", hslFalse);
PTL::SetPipettingState("ExcludeErrorPositionsEnabled", hslFalse);
PTL::SetPipettingState("CalibrateCarrierChannel", -1);
PTL::SetPipettingState("InitializeChannelVariable", "");
PTL::SetPipettingState("InitializeEnabled", hslTrue);
PTL::SetPipettingState("TipPickupChannelVariable", "");
PTL::SetPipettingState("TipPickupEnabled", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReloadable", hslTrue);
PTL::SetPipettingState("TipPickupSequenceReducible", hslTrue);
PTL::SetPipettingState("TipEjectChannelVariable", "");
PTL::SetPipettingState("AspirateMode", 0);
PTL::SetPipettingState("AspirateCLLDSensitivity", 5);
PTL::SetPipettingState("AspirateFluidHeight", 0);
PTL::SetPipettingState("AspirateSubmergeDepth", 2);
PTL::SetPipettingState("AspirateChannelVariable", "");
PTL::SetPipettingState("AspirateMaxHeightDiff", 0);
PTL::SetPipettingState("AspiratePLLDSensitivity", 0);
PTL::SetPipettingState("AspirateLiquidFollowing", hslTrue);
PTL::SetPipettingState("AspirateUserDefinedLiquidClass", "StandardVolume_Water_DispenseJet_Empty");
PTL::SetPipettingState("AspirateSequenceReloadable", hslFalse);
PTL::SetPipettingState("AspirateSequenceReducible", hslFalse);
PTL::SetPipettingState("AspirateSequenceCurrentInitialization", -10);
PTL::SetPipettingState("AspirateSequenceCurrentFinalization", -7);
PTL::SetPipettingState("AspirateSequenceCountInitialization", -10);
PTL::SetPipettingState("AspirateSequenceCountFinalization", -8);
PTL::SetPipettingState("AspirateSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseSubmergeDepth", 0);
PTL::SetPipettingState("DispenseChannelVariable", "");
PTL::SetPipettingState("DispenseCLLDSensitivity", 0);
PTL::SetPipettingState("DispenseFluidHeight", 5);
PTL::SetPipettingState("DispenseMode", 1);
PTL::SetPipettingState("DispenseLiquidFollowing", hslTrue);
PTL::SetPipettingState("DispenseUserDefinedLiquidClass", "StandardVolume_Water_DispenseJet_Empty");
PTL::SetPipettingState("DispenseSequenceReloadable", hslFalse);
PTL::SetPipettingState("DispenseSequenceReducible", hslFalse);
PTL::SetPipettingState("DispenseSequenceCurrentInitialization", -9);
PTL::SetPipettingState("DispenseSequenceCurrentFinalization", -7);
PTL::SetPipettingState("DispenseSequenceCountInitialization", -9);
PTL::SetPipettingState("DispenseSequenceCountFinalization", -8);
PTL::SetPipettingState("DispenseSequenceCalibration", hslTrue);
PTL::SetPipettingState("DispenseRestVolumeDestination", 0);
PTL::SetPipettingState("DispenseRestVolumeToAspirateSequenceSurface", hslFalse);
PTL::SetPipettingState("DispenseRestVolumeFluidHeight", 0);
if( 0 == PTL::Pipette(ML_STAR, ML_STAR.ST_L_NE_stack_0001, ML_STAR.PositiveControl, ML_STAR.QC_Plate_Col_1, 1, 1, 4, 0, 1, hslInfinite, hslInfinite, 1, "") )
{
    PTL::RaiseRuntimeError(-1573650176, PTL::IDS::smartStepPipette, PTL::IDS::smartStepFailed, "HxGRUCompCmd");
}
// }} ""
// {{{ 5 "QCAliquotMini" "End"
}
// }} ""
// {{{ 5 "OnStart" "Begin"
private function OnStart(  ) void {
// }} ""
// {{ 5 "OnStart" "InitLocals"
// }} ""
// {{{ 120 1 0 "d2317029_4565_436e_993bae2f9e6ff8bf" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
HSLHamHeaterShaker::CreateStarDevice(ML_STAR, 2, heaterID);
// }} ""
// {{{ 121 1 0 "657b0e80_1308_420f_a4c20accafeba6e1" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
EASYPICK::INIT::Init(ML_STAR, 1, 1);
// }} ""
// {{{ 122 1 0 "6049d025_3cd5_47cf_87d911d2a9b78c29" "{C1F3C015-47B3-4514-9407-AC2E65043419}"
HSLHamHeaterShaker::StartTempCtrl(heaterID, 68, 0);
// }} ""
// {{{ 123 1 0 "bf5733d4_dde3_40ee_a4ff61bf38fe0965" "{7C4EF7A7-39BE-406a-897F-71F3A35B4093}"
EASYPICK_HELPER::EasyStep_Init(ML_STAR, EASYPICK::_HSLTRUE);
// }} ""
// {{{ 5 "OnStart" "End"
}
// }} ""
/* {{ 2 "SubmethodInsertLine" "" */ // }} ""
// $$author=jenda$$valid=0$$time=2021-08-10 18:22$$checksum=6720c95a$$length=084$$